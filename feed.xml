<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Sahithyan's Blog]]></title>
        <description><![CDATA[Sahithyan's Blog]]></description>
        <link>https://sahithyandev.github.io/</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 15 Jun 2021 17:00:09 GMT</lastBuildDate>
        <atom:link href="https://sahithyandev.github.io/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Story of Building XCalc]]></title>
            <description><![CDATA[<div style="height:80px"></div><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Why I built XCalc?</span></h2><p>We all have a pre-installed calculator app on our devices (except iPad users). They provide us with basic and some advanced operations. For the majority of people, in most cases, that is more than enough.</p><p>But, as a Math lover, sometimes, I ran into some problems which can be solved easily on a computer (or a calculator), but still not included in any of these existing calculator apps.
For example, prime factorization. It&#x27;s easy for a small set of numbers (like 500, 360). But on a computer, it can be done in seconds (or even milliseconds). But I have never seen that functionality included in a calculator. And this is only one example. This felt like a gap for me. That’s why I decided to develop a calculator app that has these extra functions. That’s what XCalc is.</p><p>Note that I only added the functions that are not available in those existing calculator apps. And I intentionally left out the functions like log or sqrt, because they are already available on the pre-installed calculator apps.</p><p>So, what functions did I add? <a target="_blank" rel="noopener noreferrer" href="https://x-calc.vercel.app/help">Here</a> is a list. </p><ul><li>is-prime: checks if a number is a prime number</li><li>factors: finds all the factors of a number</li><li>lcm: finds the least common multiple of a list a numbers</li><li>gcd: finds the greatest common divisor of a list a numbers</li><li>factorial: finds the n-th factorial</li><li>ratio: finds the minimum ratio in a list of numbers</li><li>nck: finds the <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a> denoted by (n k)</li><li>prime-factorize: finds the prime factorization of the given number</li></ul><p>If you like the idea of XCalc, you can try it <a target="_blank" rel="noopener noreferrer" href="https://bit.ly/xcalc-web">here</a>. From the website, XCalc can be installed to your devices (I don’t know if it is supported on all operating systems and all browsers).
And <a target="_blank" rel="noopener noreferrer" href="https://bit.ly/xcalc-app">XCalc is available on Google Play Store</a> as well.</p><p>If you are interested to see how XCalc is coded, Good news, XCalc is <a target="_blank" rel="noopener noreferrer" href="http://github.com/sahithyandev/xcalc">open-sourced</a>. If you find it hard to understand the code, let me know about that.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">How I built it</span></h2><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text"><a target="_blank" rel="noopener noreferrer" href="https://typescriptlang.org">TypeScript</a></span></h3><p>TypeScript is a strict syntactical superset of JavaScript and adds optional strict typing to the language. It compiles to JavaScript.</p><p>I decided to bring it into the codebase mainly for two reasons. The important one is <strong>prevention of many little bugs</strong>. As TypeScript allows me to set types to everything, now I don’t have to be too concerned about the code now. I can be confident (in most cases) that I am not gonna run into any runtime errors.
And the next one is, <strong>reduced mind-overloading</strong>. Which means, now, I don’t have to memorize the function parameter types and object structures. My IDE&#x27;s intellisense takes care of that.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">UI Design</span></h3><p>It&#x27;s highly recommended to design the UI before coding it. <a target="_blank" rel="noopener noreferrer" href="https://www.youtube.com/watch?v=ZyAsNw7XZ1c">Here&#x27;s why</a>. </p><p>Hence, I decided to design the whole UI first (or at least try). I opened up <a target="_blank" rel="noopener noreferrer" href="https://figma.com">Figma</a> and gave it a try. Here&#x27;s what I designed.</p><img alt="XCalc Old UI design" src="/post__images/building-xcalc/xcalc-old-design.jpg" loading="lazy"/><p>I went with it. Because, the important thing about XCalc is its functionality; not the UI.</p><p>When I made XCalc completely working, (as always) I stopped working on it. After about 3 months, I came back. I decided to rewrite the whole app with new (better) technologies. As a part of that, I redesigned the UI. It turned out to be pretty great.</p><img alt="XCalc New UI design" src="/post__images/building-xcalc/xcalc-new-design.png" loading="lazy"/><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text"><a target="_blank" rel="noopener noreferrer" href="https://reactjs.org">React</a></span></h3><p>When I first started developing XCalc, I didn&#x27;t use any front-end libraries. I wanted to write all the code by myself. The state of the app (the input), the dynamic UI rendering were all done by the code I wrote. At first, It worked without any problems.  But when I came back after 3 months, I understood none of it. That&#x27;s when I realized that I should have used a front-end library.</p><p>When I started rewriting the app, I chose to go with React, which is my favorite front-end library.</p><p>To be honest, the React code is not that good either. But it is a lot more readable than my code.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text"><a target="_blank" rel="noopener noreferrer" href="https://sass-lang.com">Sass</a></span></h3><p>Sass is a pre-compiler for CSS. It provides some additional functionalities which results in a better developer experience. That’s the one and only reason I decided to use Sass.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Off-thread evaluations</span></h3><p>By default, the browser uses a single thread (&quot;main thread&quot;) to run all the processes of a website. This is where the layout and paint are done. This is where the user events get processed. And also, this is where, the javascript runs. Which means, long-running JavaScript will block the thread, leading to an unresponsive page (== bad user experience)</p><p>This is where web workers come into play. Web workers are a simple means for web content to run scripts on background threads. This will make sure the main thread is free from getting stuck. <a target="_blank" rel="noopener noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Learn more about web workers on MDN</a>.</p><p>XCalc never blocked the main thread (on my laptop and my phone), it worked without any problems. There were no performance issues at all. But, on the low-end phones, performance issues might rise.</p><p>And, it&#x27;s a good idea to use the main thread only for UI work. That&#x27;s why the main thread is called &quot;UI thread&quot; on other platforms. So, I moved the evaluations of the input to a web worker. </p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Offline support</span></h3><figure><blockquote cite="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#what_is_a_service_worker">Service workers are a special type of web workers. A service worker is essentially a JavaScript file that runs separately from the main browser thread (or UI thread), intercepting network requests, caching or retrieving resources from the cache, and delivering push messages.</blockquote><figcaption><cite>Google Developers Blog</cite></figcaption></figure><p>With the use of service workers, web apps can now deliver a custom offline experience. For example, YouTube and Spotify have a custom offline page. While searching for more examples, I found this <a target="_blank" rel="noopener noreferrer" href="https://sudoku.jull.dev/">awesome sudoku game</a>, which is completely available for offline use.</p><p>Like that sudoku game, XCalc doesn’t need an active internet connection to work. So, as you may guess, I wanted to make XCalc completely offline, just like that game. So, I added a service worker to do that. It pre-caches all the required resources. After that, the resources will be loaded from the cache.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text"><a target="_blank" rel="noopener noreferrer" href="https://webassembly.org">WebAssembly</a> (<a target="_blank" rel="noopener noreferrer" href="https://www.assemblyscript.org">AssemblyScript</a>)</span></h3><p>WebAssembly (WASM, in short) is a new type of code that can be run inside web browsers. It is a low-level assembly-like language which runs with near-native performance.
But, <strong>keep in mind that WASM is not intended to replace JS, and it won’t</strong>.</p><p>WebAssembly first appeared in 2017, but I came to know about it recently. I decided to use it in XCalc. I know that WebAssembly wasn&#x27;t meant to be used on a calculator app like XCalc, But I chose to use it just for the sake of learning.</p><p>C, C++, Rust can be compiled to WASM. But I don&#x27;t know any of them before. And I didn&#x27;t want to learn them. Fortunately, I came to know about AssemblyScript. AssemblyScript is a typescript-based language which compiles to WASM. With the familiar syntax, AssemblyScript appeared to be the best option for me. So, I chose to use it.</p><p>Getting started with AssemblyScript was a little hard for me. But, maybe, that would have been easy if I read the documentation clearly.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Conclusion</span></h2><p>Overall, working on XCalc was a really great experience for me. There was a lot of fun and learning.</p><p>Here is the main thing I learnt while building XCalc.</p><p><strong>Read the documentation clearly</strong>. This is one of my bad habits. I don&#x27;t read the documentation completely. I always miss to notice something in every documentation I read. Because of that, I have even spent a significant amount of time, trying to find how to do a specific thing (which is already explained in the documentation). So, when you are reading a documentation for something, make sure to read it through. Don’t skip anything. When you get stuck with an error or bug, before starting searching it on google, make sure to check the official documentation.</p><p>If you have read this much, Thank you for your time. Have any questions? Feel free to <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/iamSahithyan">reach me out on Twitter</a></p>]]></description>
            <link>https://sahithyandev.github.io/post/building-xcalc</link>
            <guid isPermaLink="true">https://sahithyandev.github.io/post/building-xcalc</guid>
            <pubDate>Thu, 10 Jun 2021 10:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Divisibility Rules - An Explanation]]></title>
            <description><![CDATA[<p>How much time would you need to check if a given number is divisible by 2 –15 without a computer? Well, for the first few numbers, you would be so fast. But you will get stuck at 7 or 13 right? Don’t worry. After reading this article, you won’t. Give it a try.</p><div style="height:80px"></div><p>First of all, for those who don&#x27;t know,<br/>
<!-- -->A divisibility rule is a shorthand way of determining whether a given integer is divisible by a fixed divisor without performing the division, usually by examining its digits. — <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Divisibility_rule">Wikipedia</a><br/>
<!-- -->That being said, we are good to go.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">&quot;The Obvious Technique&quot;</span></h2><p>Before diving into the number-specific rules, I would like to explain to you an obvious technique, that can be done for any number. (I am almost sure that you know about this technique. But I am going to explain it anyway.)</p><p>Let’s say that we want to check if p is divisible by q. <strong>The divisibility of p by q is conserved if we add or subtract a multiple of q to or from p</strong>. We can use this rule to reduce the big numbers into small ones which makes it easy for us to check if they are divisible.</p><img alt="Checking if 3056 is divisible by 27" src="/post__images/divisibility-rules/The Obvious Rule.png" loading="lazy"/><p>For example, let’s say that we want to check if 3056 is divisible by 27. We can do that using the above-mentioned technique. I will subtract 2700 and then 297 (which are both divisible by 27), from 3056.</p><p>As it comes down to 69, which is not divisible by 27, 3056 is also not divisible by 27.</p><p>It can be long and hard most of the time. But in some cases, it can be easy and fast (for example, checking if 5430 is divisible by 27). We will use this process in some (if not all) rules in this story. I will refer to this technique as the <em>Basic Technique</em> in this story.</p><p>Note: <strong>iff</strong> means if and only if, for example, <em>A iff B</em> means, A is true if and only if B is true.</p><p>Also, note that I am talking about divisibility rules in the “Decimal Number System”. You can find divisibility rules in other number systems with the ideas gathered from here. <em>If you think of yourself as a nerd, try to find divisibility rules in binary and octal number systems</em>.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Elementary Rules</span></h2><p>Before we dive into the main rules, I want to explain some of the elementary rules that everyone knows. <em>These are sorted from easy to hard</em>.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">10</span></h3><p><strong>Check if the last number is 0</strong>. I know that I shouldn’t include it here. But whatever. And as it is so obvious, let’s move on.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">2, 5 (n)</span></h3><p><strong>Check if the last digit is divisible by n</strong>. I would like to explain why. You can skip the next paragraph if you want.</p><p>Take a number in the format of <em>ABC (0 ≤ A, B, C ≤ 9)</em> (It doesn’t have to be a 3-digit number; it can any number of digits).</p><p>Everyone knows that <em>ABC</em> can be written as <em>AB0 + 00C</em>. We know that <em>AB0</em> is divisible by 2, 5, 10 (because the last digit is 0). As mentioned in the <em>Basic Technique</em>, <em>00C</em>’s divisibility of 2 is the same as <em>ABC</em>’s. So checking the last digit is enough.</p><p>I also want to say that 2, 5, 10 are the only numbers that have the “<em>check the last digit</em>” divisibility-rule type.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">3, 9 (n)</span></h3><p>These two are also easy, but you can’t tell it instantly like 2 or 5. <strong>Add up the digits of the number, and see if it is divisible by n</strong>. By the way, I want to note that these are the only numbers that have the “<em>Add up the digits</em>” divisibility-rule type.</p><p>For example, 12049’s digits add up to 16. So 12049 is not divisible by both 3 and 9 as 16 is not divisible by both 3 and 9.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">4, 8</span></h3><p>4 and 8’s divisibility rules are like 2&#x27;s. But instead of checking the last digit, you have to <strong>check the last 2 digits for 4 and check the last 3 digits for 8</strong>.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">6</span></h3><p><strong>A number is divisible by 6 iff the number is divisible by both 2 and 3</strong>. So do the rules for 2 and 3 on the number, and if both ended up true, then the number is divisible by 6.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">The Unknown Rules</span></h2><p>As you are clear about the basic rules for divisibility testing, we can start looking at some lesser known rules.</p><p>I am not going to explain the general cases anymore. Because it would be so hard for both you and me. I will just explain with an example.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">7, 11, 13, 17 (n)</span></h3><p>These numbers share the same kind of pattern in their divisibility rules, so I grouped them.</p><p>I am going to show you how to check if 54012 is divisible by 7. First, observe this example. Then choose a different number and see if you really understood it.</p><img alt="Checking if 54012 is divisible by 7" src="/post__images/divisibility-rules/Divisibility Rule - 7.svg" loading="lazy"/><p>54012, so the last number is 2 and the other numbers are 5401. So I am going to subtract 4 (2 times the last number) from 5401, and I get 5397.
As I am not sure if it is divisible by 7, I am going to do it again. I am repeating this process until I get 41 which I know is not divisible by 7. So we can conclude that 54012 is not divisible by 7.</p><p>I will refer to this recursive technique as “<em>Recursive Technique</em>”.</p><p>To check if a number is divisible by 11 or 13 or 17, you have to follow the same process. But instead of multiplying the last digit with 2, you have to multiply it with a different number, based on the below table.</p><table><thead><tr><th>n</th><th>multiply with</th></tr></thead><tbody><tr><td>7</td><td>2</td></tr><tr><td>11</td><td>1</td></tr><tr><td>13</td><td>9</td></tr><tr><td>17</td><td>5</td></tr></tbody></table><p>To check if a number is divisible by 11 or 13 or 17, you have to follow the same process. But instead of multiplying the last digit with 2, you have to multiply it with a different number, based on the below table.</p><p>If you want to know about the relation between these numbers, just keep reading.</p><h3 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">For all the other numbers</span></h3><p>This may sound stupid to you. But wait, I am not saying that every other number has ONE divisibility rule. I am just saying that there are some techniques that you can use to find a number’s divisibility rule.</p><p>First, you have to <strong>see if it is a power of 2 or 5</strong>. Let’s say that the number is nth power of 2 or 5. Then check for the last n digits. That’s enough. This is why I told you to check for the last 2 digits for 4 (2²) and 3 digits for 8 (2³).
The explanation for this is quite easy. 10 is divisible by 2 and 5, so 10’s nth power is divisible by the nth power of both 2 and 5. I hope you can finish the explanation on your own. <!-- -->[Refer to the 2, 5’s explanation]<!-- -->
Don’t be sad if it is not a power of 2 or 5, we have more techniques.</p><p>Next, <strong>Check if any of its multiples have 1 as the last digit</strong>. For example, 7 has 21, 9 has 81, 11 has 11, 13 has 91, 17 has 51, and so on. If it does, you can do the <em>Recursive Technique</em>. But you have to multiply the last digit with a number. How do you select the number? I hope the image below gives you an idea.</p><table><thead><tr><th>n</th><th></th><th>multiply with</th></tr></thead><tbody><tr><td>7</td><td>2<em>1</em></td><td>2</td></tr><tr><td>11</td><td>1<em>1</em></td><td>1</td></tr><tr><td>13</td><td>9<em>1</em></td><td>9</td></tr><tr><td>17</td><td>5<em>1</em></td><td>5</td></tr></tbody></table><p>You have to multiply by the number you get after crossing out the last “1”. But why?, we are just doing the <em>Basic Technique</em>. Think about it. If you couldn’t find out, let me know somehow (yeah, I am lazy to implement the comments section here), I will try to add it.</p><p>And I have one more trick which works for non-primes. Let’s say we want to check if p is divisible by q. We can do that by checking if <em>p</em> is divisible by all (or some) of the factors of <em>q</em>. In most cases, it can be hard to do, but sometimes it can be helpful.</p><p>For example, 6, we check for its factors (2, 3). It’s so easy in the case of 6 because we have to check for only 2 and 3. But what about other numbers that have many factors? For those numbers, there is an easy way too. Instead of checking for all of the factors of <em>q</em>, you can just check it for 2 numbers. But how would you select those two numbers? <strong>Those two numbers must fulfill these 2 conditions</strong>.</p><ol><li>Their <a target="_blank" rel="noopener noreferrer" href="(https://en.wikipedia.org/wiki/Greatest_common_divisor)">greatest common divisor (GCD)</a> is 1. </li><li>when multiplied, they give <em>q</em>.</li></ol><p>With these tricks and techniques, you can check if a number is divisible by any number between 2 and 28 in 10 seconds. You can go for other numbers too, but it may take longer. But as you use them again and again, you will slowly become fast.</p><p>PS: The <em>Basic Technique</em> and the <em>Recursive Technique</em> are not mathematical terms. I am just naming them just for the sake of reference.</p>]]></description>
            <link>https://sahithyandev.github.io/post/divisibility-rules</link>
            <guid isPermaLink="true">https://sahithyandev.github.io/post/divisibility-rules</guid>
            <pubDate>Sat, 27 Feb 2021 10:40:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript Shorthands]]></title>
            <description><![CDATA[<div style="height:80px"></div><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">parseInt()</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>
</code></pre><p>parseInt is a function in JavaScript which is used to convert a string to a number. There is an awesome shorthand is available for parseInt. “+” is the shorthand. It’s very easy when writing a 1000-line-JS.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token operator">+</span>y<span class="token punctuation">)</span> <span class="token comment">// 100</span>
</code></pre><p>It works with <strong>parseFloat()</strong> too.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Math.floor()</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">14.45</span>
<span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment">// 14</span>
</code></pre><p>Math.floor is a function that is used to return the largest integer value that is less than or equal to a number. <strong>“~~”</strong> is the shorthand for this function. I hope you have a smile now.</p><pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span>z<span class="token punctuation">)</span> <span class="token comment">// returns 14 </span>
</code></pre><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">String to Boolean</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> strValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span>
strValue <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
</code></pre><p>I am sure you will think that this is the shorthand. But there is a even short way for this too. The operator used above is called a Ternary operator. You can use this as a shorthand for an If-Else loop. The below code is a shorthand for the string to boolean conversion. It also works for number values too.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> boolValue <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>strValue <span class="token comment">// true</span>
</code></pre><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">If-Else statement</span></h2><p>As mentioned earlier, you can use the ternary operator as shorthand for the If-Else statement-based assignment. But when using multiline-blocks in If-Else statement, the ternary operator wants to be extended as shown below.</p><pre class="language-js"><code class="language-js">age <span class="token operator">&gt;</span> <span class="token number">13</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
<span class="token comment">// age is higher than 13</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
<span class="token comment">// age is not higher than 13</span>
<span class="token punctuation">)</span>
</code></pre><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">XOR gate?</span></h2><p>We all know AND-OR gates. We use them in many places. Some of them may have heard the XOR gate. It is a mixture of AND-OR concepts. Here is the truth table for the XOR gate. for more.</p><table><thead><tr><th>A</th><th>B</th><th>A XOR B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>The XOR gate returns true if the number of inputs is odd. Sometimes we want this too. AND and OR can be accessed in JS with &amp;&amp; and || operators respectively. But how we can access XOR?</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token comment">// these will work as XOR.</span>
<span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">B</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">A</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token operator">!</span><span class="token constant">B</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><p>But the above code is too big and we want a lot of time to write it without any problem. The problem can be solved with just a “^”.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Shorthand</span>
<span class="token constant">A</span> <span class="token operator">^</span> <span class="token constant">B</span> <span class="token comment">// ^ works as XOR</span>
</code></pre><p>The above short-handed code will work. But there is a small problem with the operator, it returns a number instead of a boolean. You can simply convert it into a boolean with the shorthand #3.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">string.split(&#x27;&#x27;)</span></h2><p>Sometimes, we want to split a string into one-letter-array as shown below.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Sahithyan&quot;</span> <span class="token comment">// my name</span>
<span class="token keyword">let</span> letters <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">&#x27;&#x27;</span><span class="token punctuation">)</span> <span class="token comment">// [S, a, h, i, t, h, y, a, n]</span>
</code></pre><p>In most cases, it’s ok to write .split(‘’) one or two times in our code. But when we want to split a string into a letter array, this gets horrible. But, fortunately, there is a shorthand for the split method.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Sahithyan&quot;</span> <span class="token comment">// my name</span>
<span class="token keyword">let</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>name<span class="token punctuation">]</span> <span class="token comment">// [S, a, h, i, t, h, y, a, n]</span>
</code></pre><p>Unfortunately, I don’t know what happens there. if you know, please tell that in the comments. But I am sure that it works.</p>]]></description>
            <link>https://sahithyandev.github.io/post/javascript-shorthands</link>
            <guid isPermaLink="true">https://sahithyandev.github.io/post/javascript-shorthands</guid>
            <pubDate>Wed, 07 Apr 2021 06:22:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introduction To My Blog]]></title>
            <description><![CDATA[<p>Hello people! Welcome to my blog!. This is my blog, built with <a target="_blank" rel="noopener noreferrer" href="https://nextjs.org/">Next.js</a>, <a target="_blank" rel="noopener noreferrer" href="https://mdxjs.com/">MDX</a> and a <a href="#packages-i-used">few other open source packages</a>.</p><p>After thinking of starting a blog for about a week, I finally decided to start developing it. And as the first blog post, I wanted to write about how I created this blog. I hope it&#x27;s helpful.</p><div style="height:80px"></div><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">First, WHY?</span></h2><p>I, occasionally, write to share my insights. In the past, I used <a target="_blank" rel="noopener noreferrer" href="https://www.medium.com">Medium</a>, a famous writing site, to write my insights as articles. But I didn&#x27;t like their <em>Only 2 free stories per month</em> plan. Hence, I started looking for alternatives. And nothing seemed suitable for me.</p><p>So I decided that I should create one on my own for me. Because, by creating my own website, I can be my own boss. I can style and structure this my blog, however I want. Medium can&#x27;t give me that power. That&#x27;s why I decided to reinventing the wheel.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">How I built it?</span></h2><p>This blog was initiated with <a target="_blank" rel="noopener noreferrer" href="https://nextjs.org/">Next.js</a>, The React Framework for Production.</p><p>I wanted to write using Markdown as it&#x27;s easy to use. As I was searching for a markdown-to-html compiler, I came across <a target="_blank" rel="noopener noreferrer" href="https://mdxjs.com/">MDX</a>. MDX is Markdown and JSX combined. It seemed more powerful. Hence, I decided to use it.</p><p>At first, I went with Server-side rendering. But now, I changed to static build.</p><h2 class="linkable-head_linkable__2KbTa" id="" data-is-linkable="true"><span class="linkable--heading-text">Packages I used</span></h2><p>In this section, I mentioned all the packages, that I installed for a specific use. (That means, I left the framework&#x27;s dependencies)</p><ul><li><a target="_blank" rel="noopener noreferrer" href="https://www.npmjs.com/package/gray-matter">gray-matter</a> - To compile the MDX files into JS objects</li><li><a target="_blank" rel="noopener noreferrer" href="https://www.npmjs.com/package/next-mdx-remote">next-mdx-remote</a> - To compile MDX into html </li><li><a target="_blank" rel="noopener noreferrer" href="https://www.npmjs.com/package/mdx-prism">mdx-prism</a> - To use prism (for syntax highlighting) with MDX</li></ul>]]></description>
            <link>https://sahithyandev.github.io/post/introduction-to-my-blog</link>
            <guid isPermaLink="true">https://sahithyandev.github.io/post/introduction-to-my-blog</guid>
            <pubDate>Fri, 26 Feb 2021 13:48:04 GMT</pubDate>
        </item>
    </channel>
</rss>