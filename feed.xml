<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Sahithyan's Blog]]></title><description><![CDATA[The website/blog of Sahithyan, A teen front-end developer, a student and a tech enthusiast from Jaffna, Sri Lanka.]]></description><link>https://sahithyandev.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 07 Dec 2022 03:39:56 GMT</lastBuildDate><atom:link href="https://sahithyandev.github.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Static Open Graph images]]></title><description><![CDATA[<section class="toc-container"><h3>Table Of Contents</h3><ol><li><a href="/post/open-graph-images#a-small-intro" data-is-internal class=" styled-link">A small intro</a></li><li><a href="/post/open-graph-images#my-initial-approach" data-is-internal class=" styled-link">My initial approach</a></li><li><a href="/post/open-graph-images#using-puppeteer" data-is-internal class=" styled-link">Using Puppeteer</a></li><li><a href="/post/open-graph-images#vercel's-solution" data-is-internal class=" styled-link">Vercel's solution</a></li><li><a href="/post/open-graph-images#the-one-issue-with-vercel's-solution" data-is-internal class=" styled-link">The one issue with Vercel's solution</a></li><li><a href="/post/open-graph-images#current-approach" data-is-internal class=" styled-link">Current approach</a></li></ol></section><h2 id="a-small-intro" class="linkable-head"><a href="/post/open-graph-images#a-small-intro" class="hashtag " data-is-internal>#</a><span>A small intro</span></h2><p>When we share a link to a webpage on Facebook or Twitter or any other social media platform, we get a preview card. Like this one, for example, from Twitter.</p><img alt="Preview Card Example" src="/post__images/the-og-package/preview-card-example.png" class="block" width="525" height="376" /><p>There's some information about the link it's referring to, such as the title. Each information mentioned on the card, is specified using a set of meta tags. Specifically, these:</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
    <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:description<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>How much time would you need to check if a given number is divisible by 2 –15 without a computer? Well, for the first few numbers, you would be so fast. But you will get stuck at 7 or 13 right? Don<span class="token punctuation">'</span>t worry. After reading this article, you won<span class="token punctuation">'</span>t. Give it a try.<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
    <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:title<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Divisibility Rules - An Explanation | Sahithyan<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sahithyandev.github.io<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
    <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:image<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://sahithyandev.github.io/og-images/divisibility-rules.png<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/></span></span>
</code></pre><p>These (the ones with <code>property=&quot;og:...&quot;</code>) are the Open Graph meta tags. These meta tags define meta data a social graph would find useful, such as, the language used in the website. You can learn more about these tags in the official website of <a href="https://ogp.me" target="_blank" rel="noopener noreferrer" class=" styled-link">Open Graph Protocol</a>.</p><p>Among all the OG tags, I think <em>og:image</em> is an important one. We can define what image should be shown in the preview card (You can see how, in the above code snippet). Usually, links with an OG image defined, drive more clicks compared to the ones that don't. They are like a free advertising space for us. Also, it reduces time took by the viewers to understand what's this link is pointing to.</p><p>In this post, I want to talk about how I managed to add OG images for the posts and other pages on this website.</p><h2 id="my-initial-approach" class="linkable-head"><a href="/post/open-graph-images#my-initial-approach" class="hashtag " data-is-internal>#</a><span>My initial approach</span></h2><p>Initially I created a blank image with my face, and used it as the OG image for all the pages.</p><img alt="The default OG image" src="/og-image-base.png" class="block" width="1200" height="630" /><p>Yeah, I know, it's not that nice looking and I shouldn't be using the same one for all the pages. But something is better than nothing. Now the viewers have something to see now.</p><h2 id="using-puppeteer" class="linkable-head"><a href="/post/open-graph-images#using-puppeteer" class="hashtag " data-is-internal>#</a><span>Using Puppeteer</span></h2><p>I started looking for some other solution as my initial approach didn't solve the issue for the most part. And I came across GitHub's blog post on <a href="https://github.blog/2021-06-22-framework-building-open-graph-images/" target="_blank" rel="noopener noreferrer" class=" styled-link">building Open Graph Images</a>. I decided to try out the same thing because it seemed fun and not that hard. On build time, a script would generate some HTML from a predefined template, and use Puppeteer to screenshot the HTML. This way, I was able to generate nice-looking page-specific OG images.</p><p>Here is an example:</p><img alt="OG image of Divisibility Rules" src="/og-images/divisibility-rules.png" width="1200" height="630" class="block" /><p>It's obviously so much better than using a fairly blank image. Now, the viewers will know about the post at the first sight.</p><p>There is one trade-off though: long build times. I am running Puppeteer on each build. Puppeteer is using a headless Chrome under the hood. We all know how about Chrome. Running Puppeteer is resource intensive and time consuming.<br />
On top of that, I was already using Puppeteer to render the pages at build time. This means, I am now running two seperate Puppeteer instances(!) which means, there's not one, but TWO headless Chrome instances running. This would have increased the time by at least 30s; believe me, that's too long.  </p><p>I was ignoring this issue because I felt like there's no <em>simple</em> solutions for this issue. Thankfully, <a href="https://vercel.com" target="_blank" rel="noopener noreferrer" class=" styled-link">Vercel</a> had one.</p><h2 id="vercel's-solution" class="linkable-head"><a href="/post/open-graph-images#vercel's-solution" class="hashtag " data-is-internal>#</a><span>Vercel's solution</span></h2><p>About a month ago, Vercel announced <a href="https://vercel.com/blog/introducing-vercel-og-image-generation-fast-dynamic-social-card-images" target="_blank" rel="noopener noreferrer" class=" styled-link">OG Image Generation on Edge network</a>.  We can use the library <strong>@vercel/og</strong> to generate OG images from HTML/CSS on-the-fly (on API routes). This library uses <a href="https://github.com/vercel/satori#readme" target="_blank" rel="noopener noreferrer" class=" styled-link">Satori</a> — a library to convert HTML/CSS to SVG — and <a href="https://github.com/RazrFalcon/resvg#readme" target="_blank" rel="noopener noreferrer" class=" styled-link">Resvg</a> — a library to convert SVG to PNG —, instead of using Puppeteer. You can learn more about it on <a href="https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation" target="_blank" rel="noopener noreferrer" class=" styled-link">@vercel/og - Vercel's Docs</a>.</p><p>In their announcement, they also mentioned that they saw <strong>5x performance improvement</strong> with @vercel/og compared to the Puppeteer-based solution. It mostly took less than a second. That's so amazing. However...</p><h2 id="the-one-issue-with-vercel's-solution" class="linkable-head"><a href="/post/open-graph-images#the-one-issue-with-vercel's-solution" class="hashtag " data-is-internal>#</a><span>The one issue with Vercel's solution</span></h2><p><strong>@vercel/og doesn't support the Node.js runtime</strong>; only the Edge Runtime. </p><img alt="Default Node.js runtime is not supported by @vercel/og" src="/post__images/the-og-package/vercel-og-support.png" class="block" width="632" height="156" /><p>They mentioned &quot;Node.js runtime will not work&quot;. Does that mean it may will, in the future? I have no idea.</p><p>But I wanted to use it in build time to generate the images. I looked for an alternative that builds on top <a href="https://github.com/vercel/satori#readme" target="_blank" rel="noopener noreferrer" class=" styled-link">Satori</a> (core library of @vercel/og) and supports Node.js. I couldn't find anything. So, I built one using the core libraries @vercel/og uses.</p><p>So, if you are someone looking to run @vercel/og locally, you can use <a href="https://github.com/sahithyandev/og" target="_blank" rel="noopener noreferrer" class=" styled-link">@sahithyan/og</a>. 😀</p><h2 id="current-approach" class="linkable-head"><a href="/post/open-graph-images#current-approach" class="hashtag " data-is-internal>#</a><span>Current approach</span></h2><p>Currently, I am using @sahithyan/og to generate the OG images.</p><p>As my website already takes a lot of time to build, I have set the script up to run on every commit, instead of on every build. It's done using husky and lint-staged. And now, OG images will be created only for the posts that are being committed locally.<br />
Other pages are still using the default one I initially used, though.</p>]]></description><link>https://sahithyandev.github.io/post/open-graph-images</link><guid isPermaLink="true">https://sahithyandev.github.io/post/open-graph-images</guid></item><item><title><![CDATA[The is-odd NPM package]]></title><description><![CDATA[<p>Take a look at this meme.</p><img class="block" alt="A meme about the is-odd npm package" src="/post__images/the-is-odd-npm-package-meme/meme.jpg" width="960" height="962" /><p>The meme is about the JavaScript developers, who use third-party libraries even for simple use-cases (like is-odd).
For those of you who don’t know, the second part of the meme, is a screenshot of the is-odd package on NPM.</p><p>Is-odd package exports a function, which takes in a number and returns if it's an odd number. Just like the name says. At the time of writing, it has over 38M downloads in total. There is also another package named is-even. It’s the opposite of is-odd. It depends on the is-odd package.</p><h2 id="who?-and-why?" class="linkable-head"><a href="/post/the-is-odd-npm-package-meme#who?-and-why?" class="hashtag " data-is-internal>#</a><span>Who? And why?</span></h2><p>When I first heard about these packages, my first question was “why would anyone want to do that?”. My first guess was “just a joke”.</p><p>When I dug a little deeper about them, I realized the real reason.</p><p>These two packages were created by the same person, Jon Schlinkert, when he was learning how to program. And I guess, he published them to NPM, also for the sake of learning.</p><p>A lot of people (including myself), have been making fun of these packages and Jon. Because of that, Jon moved the repositories under a github organization named “i-voted-for-trump”. That’s a good move, Jon.</p><p>But, is it really ok to be mocking him? And the packages? I don’t think so. The packages and the creator haven’t done anything wrong here. Only the people who use it.</p>]]></description><link>https://sahithyandev.github.io/post/the-is-odd-npm-package-meme</link><guid isPermaLink="true">https://sahithyandev.github.io/post/the-is-odd-npm-package-meme</guid></item><item><title><![CDATA[A JavaScript Quiz — Explained]]></title><description><![CDATA[<p>In this story, I am going to explain the 14 questions that appeared in the quiz <a href="http://perfectionkills.com/javascript-quiz/" target="_blank" rel="noopener noreferrer" class=" styled-link">http://perfectionkills.com/javascript-quiz/</a>.</p><p>Do the quiz first. Then read this story.</p><section class="toc-container"><h3>Table Of Contents</h3><ol><li><a href="/post/a-javascript-quiz#questions" data-is-internal class=" styled-link">Questions</a><ul><li><a href="/post/a-javascript-quiz#q1" data-is-internal class=" styled-link">Q1</a></li><li><a href="/post/a-javascript-quiz#q2" data-is-internal class=" styled-link">Q2</a></li><li><a href="/post/a-javascript-quiz#q3" data-is-internal class=" styled-link">Q3</a></li><li><a href="/post/a-javascript-quiz#q4" data-is-internal class=" styled-link">Q4</a></li><li><a href="/post/a-javascript-quiz#q5-(my-favorite-one)" data-is-internal class=" styled-link">Q5 (My favorite one)</a></li><li><a href="/post/a-javascript-quiz#q6" data-is-internal class=" styled-link">Q6</a></li><li><a href="/post/a-javascript-quiz#q7" data-is-internal class=" styled-link">Q7</a></li><li><a href="/post/a-javascript-quiz#q8" data-is-internal class=" styled-link">Q8</a></li><li><a href="/post/a-javascript-quiz#q9" data-is-internal class=" styled-link">Q9</a></li><li><a href="/post/a-javascript-quiz#q10-(easiest-in-my-opinion)" data-is-internal class=" styled-link">Q10 (Easiest in my opinion)</a></li><li><a href="/post/a-javascript-quiz#q11" data-is-internal class=" styled-link">Q11</a></li><li><a href="/post/a-javascript-quiz#q12" data-is-internal class=" styled-link">Q12</a></li><li><a href="/post/a-javascript-quiz#q13" data-is-internal class=" styled-link">Q13</a></li><li><a href="/post/a-javascript-quiz#q14" data-is-internal class=" styled-link">Q14</a></li></ul></li><li><a href="/post/a-javascript-quiz#finally:-thank-you!" data-is-internal class=" styled-link">Finally: Thank You!</a></li></ol></section><h2 id="questions" class="linkable-head"><a href="/post/a-javascript-quiz#questions" class="hashtag " data-is-internal>#</a><span>Questions</span></h2><h3 id="q1" class="linkable-head"><a href="/post/a-javascript-quiz#q1" class="hashtag " data-is-internal>#</a><span>Q1</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Here, an IIFE (Immediately-Invoked Function Expression) is defined. IIFE means, the function will invoke immediately.</p><p>“arguments” is an array that holds all the arguments of the function. In this case, the function returns typeof arguments. Everyone knows it, type of an array is “object”.</p><h3 id="q2" class="linkable-head"><a href="/post/a-javascript-quiz#q2" class="hashtag " data-is-internal>#</a><span>Q2</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token number">23</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Here, a variable named f is defined. And its value is set to a function named g. We have to note one thing. g is defined but then assigned to f. So, g is undefined now.</p><p>So running g() will throw an error.</p><h3 id="q3" class="linkable-head"><a href="/post/a-javascript-quiz#q3" class="hashtag " data-is-internal>#</a><span>Q3</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">delete</span> x<span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Here, again we encounter another IIFE. In this function, the “delete” keyword is used with the parameter x. But</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Description">delete is only effective on an object’s properties.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Description" target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>So, the “delete” operator stays silent here and 1 is returned as x’s value.</p><h3 id="q4" class="linkable-head"><a href="/post/a-javascript-quiz#q4" class="hashtag " data-is-internal>#</a><span>Q4</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token punctuation">;</span>
</code></pre><p>Here, y is defined and set to 1. Then x, y is set to the type of x. It is executed from right to left. That means x is undefined in the “typeof x” statement. So <code>typeof undefined</code> is <code>“undefined”</code> and that will be set to y. What about x then? x’s value is also undefined.</p><p>Because,</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment#:~:text=The%20assignment%20operation%C2%A0evaluates%20to%C2%A0the%20assigned%20value">The assignment operation evaluates to the assigned value.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment#:~:text=The%20assignment%20operation%C2%A0evaluates%20to%C2%A0the%20assigned%20value" target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><h3 id="q5-(my-favorite-one)" class="linkable-head"><a href="/post/a-javascript-quiz#q5-(my-favorite-one)" class="hashtag " data-is-internal>#</a><span>Q5 (My favorite one)</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Here, another IIFE. A function <code>f</code> is defined. <code>f</code> expects a parameter named <code>f</code>. To avoid confusion, I will refer to the function <code>f</code> as <code>$f</code> and the parameter f as <code>_f</code>. Then in the second line, the function is returning the typeof f().</p><p>But, What does f() mean? $f or _f ?. Variables are searched in the local scope first. If it's not defined in the local scope, then the parent scope is searched. This search is continued until the variable is found or there is no parent scope.</p><p>So in this case, <code>_f</code> is available in the local scope (scope under <code>$f</code>). So, <code>_f</code> is called.</p><p>What is <code>_f</code>? <code>_f</code> is the first parameter passed to the function <code>$f</code>. In this case, it's the function that returns 1. So, <code>_f()</code> is 1. <code>typeof 1</code> is <code>&quot;number&quot;</code>. We all know that.</p><h3 id="q6" class="linkable-head"><a href="/post/a-javascript-quiz#q6" class="hashtag " data-is-internal>#</a><span>Q6</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">baz</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    baz<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>IIFE again. Here a variable named foo is defined and set to that object.</p><p>The object (foo) has 2 keys <code>bar</code> &amp; <code>baz</code>. <code>baz</code> is 1. <code>bar</code> is a function that returns <code>baz</code>. In this case, 1. (<code>this</code> points to the object foo).</p><p>Then comes the IIFE. The function returns the type of the value returned by its (first argument) function. The first argument is <code>foo.bar</code>. <code>foo.bar</code> returns <code>this.baz</code>. What does <code>this</code> mean here? Does it point to <code>foo</code> or something else?</p><p><code>this</code> keyword is a tricky one. I am not going to even try to explain it. To be honest, I don't understand it enough either. I just think of it as the &quot;parent context&quot;. If the function is called normally, it points to <code>globalThis</code>. If it is called as a method of an object, <code>this</code> points to the object. To learn more about <code>this</code> in JavaScript, take a look at the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noopener noreferrer" class=" styled-link">Reference page of <code>this</code> on MDN</a>.</p><p>Here, <code>arguments[0]</code> is called normally. So, <code>this</code> points to <code>globalThis</code> now. Whether it is <code>window</code> or <code>global</code>, <code>baz</code> is not defined. Hence, it returns <code>undefined</code>. Finally, the IIFE returns <code>&quot;undefined&quot;</code>.</p><h3 id="q7" class="linkable-head"><a href="/post/a-javascript-quiz#q7" class="hashtag " data-is-internal>#</a><span>Q7</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">baz</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    baz<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">(</span>f <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token property-access">bar</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>This question is also like the previous one. <code>foo</code> is defined with the same value as of #6.</p><p>Here, a variable named f gets defined and set to foo.bar. As I have mentioned for #4, we know that, <code>(f = foo.bar)</code> evaluates to <code>f</code>. Now <code>f</code> wil be executed.</p><p><code>f</code> is being called from the global context. Thus, inside <code>f</code>, <code>this</code> is <code>globalThis</code>. globalThis.baz is undefined. So again, the typeof undefined is “undefined”.</p><h3 id="q8" class="linkable-head"><a href="/post/a-javascript-quiz#q8" class="hashtag " data-is-internal>#</a><span>Q8</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> f<span class="token punctuation">;</span>
</code></pre><p>The comma operator is used here. Never heard of the comma operator?</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator#:~:text=The%20comma%20operator%C2%A0(%2C)%20evaluates%20each%20of%20its%20operands%20(from%20left%20to%20right)%20and%20returns%20the%20value%20of%20the%20last%20operand.">The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator#:~:text=The%20comma%20operator%C2%A0(%2C)%20evaluates%20each%20of%20its%20operands%20(from%20left%20to%20right)%20and%20returns%20the%20value%20of%20the%20last%20operand." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>As of MDN’s statement, the comma operator evaluates each operand and returns the rightmost value. In this case, g is the rightmost value. So the value of the variable f is the return value of function g. g returns 2. So f is 2. Therefore <code>typeof f</code> is <code>“number”</code>.</p><h3 id="q9" class="linkable-head"><a href="/post/a-javascript-quiz#q9" class="hashtag " data-is-internal>#</a><span>Q9</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">+=</span> <span class="token keyword">typeof</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
x<span class="token punctuation">;</span>
</code></pre><p>In this question, we have to find the value of <code>x</code> at the end. When <code>x</code> is defined, it is 1. Then there is an if block. It checks if “function f() {}” is truthy.</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Glossary/Truthy#:~:text=In%20JavaScript%2C%20a%20truthy%20value%20is%20a%20value%20that%20is%20considered%20true%20when%20encountered%20in%20a%20Boolean%20context.%20All%20values%20are%20truthy%20unless%20they%20are%20defined%20as%20falsy%20(i.e.%2C%20except%20for%20false%2C%200%2C%20-0%2C%C2%A00n%2C%20%22%22%2C%20null%2C%20undefined%2C%20and%20NaN).">In JavaScript, a truthy value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, -0, 0n, &quot;&quot;, null, undefined, and NaN).</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy#:~:text=In%20JavaScript%2C%20a%20truthy%20value%20is%20a%20value%20that%20is%20considered%20true%20when%20encountered%20in%20a%20Boolean%20context.%20All%20values%20are%20truthy%20unless%20they%20are%20defined%20as%20falsy%20(i.e.%2C%20except%20for%20false%2C%200%2C%20-0%2C%C2%A00n%2C%20%22%22%2C%20null%2C%20undefined%2C%20and%20NaN)." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>So, the function is truthy. Now, <code>typeof f</code> gets added to x. Is that <code>&quot;function&quot;</code>? That's what I thought, at first. But turns out it's not.</p><figure><blockquote cite="https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-runtime-semantics-instantiateordinaryfunctionexpression">The Identifier in a FunctionExpression can be referenced from inside the FunctionExpression's FunctionBody to allow the function to call itself recursively. However, unlike in a FunctionDeclaration, the Identifier in a FunctionExpression cannot be referenced from and does not affect the scope enclosing the FunctionExpression.</blockquote><figcaption><cite>ECMAScript Specification(<a href="https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-runtime-semantics-instantiateordinaryfunctionexpression" target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>If you don't understand (which is totally fine),<br />
If the function is defined in the condition of if block, it's a <em>FunctionExpression</em>. The <em>Identifier</em> in the expression (which is the function name, in this case, <code>f</code>), cannot be the referenced from that scope.</p><p>This means, variable <code>f</code> is undefined inside the if block.</p><h3 id="q10-(easiest-in-my-opinion)" class="linkable-head"><a href="/post/a-javascript-quiz#q10-(easiest-in-my-opinion)" class="hashtag " data-is-internal>#</a><span>Q10 (Easiest in my opinion)</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">typeof</span> x<span class="token punctuation">,</span> <span class="token keyword">typeof</span> y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">typeof</span> x<span class="token punctuation">;</span>
</code></pre><p><code>x</code> is defined as the typeof y. y is, obviously undefined. So, x is <code>&quot;undefined&quot;</code>.</p><p><code>typeof x</code> is string. <code>typeof &quot;string&quot;</code>, is again, <code>&quot;string&quot;</code>.</p><h3 id="q11" class="linkable-head"><a href="/post/a-javascript-quiz#q11" class="hashtag " data-is-internal>#</a><span>Q11</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">.</span><span class="token property-access">bar</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Another IIFE!</p><p>Inside the function, <code>foo</code> is equal to <code>{ foo: { bar: 1 }}</code>. <code>foo.bar</code> is obviously undefined. <code>typeof undefined</code> is, again, <code>&quot;undefined&quot;</code></p><p>I don't feel like this question is good enough to be put in this quiz.</p><h3 id="q12" class="linkable-head"><a href="/post/a-javascript-quiz#q12" class="hashtag " data-is-internal>#</a><span>Q12</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword control-flow">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>IIFE again. Here a function named “f” is defined (which I will refer to as <code>f1</code>). Inside the function, two functions are defined with the same name “f”. The first function (which I will refer to as <code>f2</code>) returns 1. The second function (which I will refer to as <code>f3</code>) returns 2.</p><p>Generally, JavaScript is interpreted. It is read and executed line by line, from top to bottom. Based on this fact, you might have thought that the declaration of <code>f3</code> is unreachable, because, <code>f1</code> returns early. And the return value would be <code>f2()</code>. But that's not the case here.</p><p>There is a thing called, &quot;Function Hoisting&quot;.</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#:~:text=Function%20declarations%20in%20JavaScript%20are%20hoisted%20to%20the%20top%20of%20the%20enclosing%20function%20or%20global%20scope.">Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#:~:text=Function%20declarations%20in%20JavaScript%20are%20hoisted%20to%20the%20top%20of%20the%20enclosing%20function%20or%20global%20scope." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>Because of this, <code>f3</code> gets put after the <code>f2</code> and before the return statement. Now, when the interpreter start executing the code, <code>f</code> (inside the <code>f1</code>'s scope), is set to <code>f2</code> and then gets overridden by the <code>f3</code>. That's why <code>f()</code> returns 2.</p><h3 id="q13" class="linkable-head"><a href="/post/a-javascript-quiz#q13" class="hashtag " data-is-internal>#</a><span>Q13</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">f</span><span class="token punctuation">;</span>
</code></pre><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof#:~:text=The%20instanceof%20operator%20tests%20to%20see%20if%20the%20prototype%20property%20of%20a%20constructor%20appears%20anywhere%20in%20the%20prototype%20chain%20of%20an%20object.">The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof#:~:text=The%20instanceof%20operator%20tests%20to%20see%20if%20the%20prototype%20property%20of%20a%20constructor%20appears%20anywhere%20in%20the%20prototype%20chain%20of%20an%20object." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>I didn’t understand it. Explain it to me, please.</p><h3 id="q14" class="linkable-head"><a href="/post/a-javascript-quiz#q14" class="hashtag " data-is-internal>#</a><span>Q14</span></h3><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> length<span class="token punctuation">;</span>
</code></pre><p>If you didn’t understand the with statement, see below.</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with#:~:text=The%20with%20statement%20extends%20the%20scope%20chain%20for%20a%20statement.">The with statement extends the scope chain for a statement.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with#:~:text=The%20with%20statement%20extends%20the%20scope%20chain%20for%20a%20statement." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>We can think the question like this <code>(function(x, undefined)).length</code></p><p>It evaluates the function’s length. But what does Function.length return?</p><figure><blockquote cite="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length#:~:text=The%20length%20property%20indicates%20the%20number%20of%20parameters%20expected%20by%20the%20function.">The length property indicates the number of parameters expected by the function.</blockquote><figcaption><cite>MDN(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length#:~:text=The%20length%20property%20indicates%20the%20number%20of%20parameters%20expected%20by%20the%20function." target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>In this case, The function expects 2 parameters. So the length property returns 2.</p><h2 id="finally:-thank-you!" class="linkable-head"><a href="/post/a-javascript-quiz#finally:-thank-you!" class="hashtag " data-is-internal>#</a><span>Finally: Thank You!</span></h2><p>I hope you find this explanation useful. Let me know if you have got any feedback.</p>]]></description><link>https://sahithyandev.github.io/post/a-javascript-quiz</link><guid isPermaLink="true">https://sahithyandev.github.io/post/a-javascript-quiz</guid></item><item><title><![CDATA[Story of Building XCalc]]></title><description><![CDATA[<section class="toc-container"><h3>Table Of Contents</h3><ol><li><a href="/post/building-xcalc#why-i-built-xcalc?" data-is-internal class=" styled-link">Why I built XCalc?</a></li><li><a href="/post/building-xcalc#how-i-built-it" data-is-internal class=" styled-link">How I built it</a><ul><li><a href="/post/building-xcalc#typescript" data-is-internal class=" styled-link">TypeScript</a></li><li><a href="/post/building-xcalc#ui-design" data-is-internal class=" styled-link">UI Design</a></li><li><a href="/post/building-xcalc#react/preact" data-is-internal class=" styled-link">React/Preact</a></li><li><a href="/post/building-xcalc#sass" data-is-internal class=" styled-link">Sass</a></li><li><a href="/post/building-xcalc#off-thread-evaluations" data-is-internal class=" styled-link">Off-thread evaluations</a></li><li><a href="/post/building-xcalc#offline-support" data-is-internal class=" styled-link">Offline support</a></li><li><a href="/post/building-xcalc#webassembly-(assemblyscript)" data-is-internal class=" styled-link">WebAssembly (AssemblyScript)</a></li></ul></li><li><a href="/post/building-xcalc#conclusion" data-is-internal class=" styled-link">Conclusion</a></li></ol></section><h2 id="why-i-built-xcalc?" class="linkable-head"><a href="/post/building-xcalc#why-i-built-xcalc?" class="hashtag " data-is-internal>#</a><span>Why I built XCalc?</span></h2><p>We all have a pre-installed calculator app on our devices (except iPad users). They provide us with basic and some advanced operations. For the majority of people, in most cases, that is more than enough.</p><p>However, as a maths student, I sometimes encounter problems that can easily be solved with a computer or calculator, but none of the calculator apps I have found include the necessary functionality. For instance, prime factorization is a fairly difficult task to do manually. But a computer could accomplish it in the order of seconds. I have never seen this functionality included in a calculator app, and this gap inspired me to develop XCalc, a calculator app with those extra functions.</p><p>Note that I only added the functions that are not available in those existing calculator apps. I intentionally left out the functions like log or sqrt, because they are already available in the pre-installed calculator apps.</p><p>So, what functions did I add? Here is a list. (You can find them on <a href="https://x-calc.vercel.app/help" target="_blank" rel="noopener noreferrer" class=" styled-link">XCalc's Help page</a> as well)</p><ul><li>is-prime: checks if a number is a prime number</li><li>factors: finds all the factors of a number</li><li>lcm: finds the least common multiple of a list a numbers</li><li>gcd: finds the greatest common divisor of a list a numbers</li><li>factorial: finds the n-th factorial</li><li>ratio: finds the minimum ratio in a list of numbers</li><li>nck: finds the <a href="https://en.wikipedia.org/wiki/Binomial_coefficient" target="_blank" rel="noopener noreferrer" class=" styled-link">binomial coefficient</a> denoted by (n k)</li><li>prime-factorize: finds the prime factorization of the given number</li></ul><p>If you like the idea of XCalc, you can try it <a href="https://bit.ly/xcalc-web" target="_blank" rel="noopener noreferrer" class=" styled-link">here</a>. From the website, XCalc can be installed to your devices (I don’t know if it is supported on all operating systems and all browsers).
And <a href="https://bit.ly/xcalc-app" target="_blank" rel="noopener noreferrer" class=" styled-link">XCalc is available on Google Play Store</a> as well.</p><p>If you are interested to see how XCalc is coded, Good news, XCalc's source code is available <a href="http://github.com/sahithyandev/xcalc" target="_blank" rel="noopener noreferrer" class=" styled-link">on GitHub</a>.</p><h2 id="how-i-built-it" class="linkable-head"><a href="/post/building-xcalc#how-i-built-it" class="hashtag " data-is-internal>#</a><span>How I built it</span></h2><p>Before you go on, you should note that this section is about the Web version of XCalc (not the Android one).</p><h3 id="typescript" class="linkable-head"><a href="/post/building-xcalc#typescript" class="hashtag " data-is-internal>#</a><span><a href="https://typescriptlang.org" target="_blank" rel="noopener noreferrer" class=" styled-link">TypeScript</a></span></h3><p>TypeScript is a strict syntactical superset of JavaScript and adds optional strict typing to the language. It compiles to JavaScript.</p><p>I decided to bring it into the code base mainly for two reasons. The primary reason is <strong>prevention of numerous tiny bugs</strong>. As TypeScript allows me to set types to everything, now I don’t have to worry as much about the code and be confident that I won't encounter runtime errors in most cases.<br />
The second reason is, <strong>reduced mental overload</strong>. Which means, now, I don’t have to remember the function parameters and object structures. My IDE's intellisense takes care of that.</p><h3 id="ui-design" class="linkable-head"><a href="/post/building-xcalc#ui-design" class="hashtag " data-is-internal>#</a><span>UI Design</span></h3><p>When starting with a new app, it's recommended to design the UI before starting the development. <a href="https://www.youtube.com/watch?v=ZyAsNw7XZ1c" target="_blank" rel="noopener noreferrer" class=" styled-link">Here's a video from DesignCourse explaining why</a>.</p><p>Hence, I decided to design (or at least try to) the whole UI first. I opened up <a href="https://figma.com" target="_blank" rel="noopener noreferrer" class=" styled-link">Figma</a> and gave it a shot. Here's what I designed.</p><img alt="XCalc Old UI design" src="/post__images/building-xcalc/xcalc-old-design.jpg" class="block" width="375" height="667" /><p>Even though it's a dull design, I went with it. Because, the important thing about XCalc is its functionality; not the UI.</p><p>After getting XCalc to work basically, I stopped working on it for about 3 months. When I returned to the project, I decided to rewrite the whole app with new (better) technologies. As a part of that, I redesigned the UI. It turned out to be pretty great.</p><img alt="XCalc New UI design" src="/post__images/building-xcalc/xcalc-new-design.png" class="block" width="1366" height="768" /><h3 id="react/preact" class="linkable-head"><a href="/post/building-xcalc#react/preact" class="hashtag " data-is-internal>#</a><span><a href="https://reactjs.org" target="_blank" rel="noopener noreferrer" class=" styled-link">React</a>/<a href="https://preactjs.org" target="_blank" rel="noopener noreferrer" class=" styled-link">Preact</a></span></h3><p>When I first started developing XCalc, I didn't use any front-end libraries and instead I wanted to write all the code by myself. I wrote code to manage both the state of the app and the dynamic UI rendering, and it worked fine. But when I returned to the project after about the time gap, I found that I didn't understand any of the code I had initially written — it was a mess. That's when I realized that I should use a front-end library.</p><p>While rewriting the app, I chose to go with React, which is my favorite front-end library.</p><p>To be honest, the React code was not that good either. But it was a lot more readable than my initial code.</p><p>Recently, XCalc has started using Preact, instead of React. Preact is just like React but faster and lighter.</p><h3 id="sass" class="linkable-head"><a href="/post/building-xcalc#sass" class="hashtag " data-is-internal>#</a><span><a href="https://sass-lang.com" target="_blank" rel="noopener noreferrer" class=" styled-link">Sass</a></span></h3><p>Sass is a pre-compiler for CSS. It provides some additional functionalities which results in a better developer experience. That’s the one and only reason I decided to use Sass.</p><h3 id="off-thread-evaluations" class="linkable-head"><a href="/post/building-xcalc#off-thread-evaluations" class="hashtag " data-is-internal>#</a><span>Off-thread evaluations</span></h3><p>By default, the browser uses a single thread (&quot;main thread&quot;) to run all the processes of a website. This is where the layout and paint are done; the user events get processed; and the JavaScript runs. Which means, long-running JavaScript will block the thread, leading to an unresponsive page (== bad user experience)</p><p>This is where web workers come into play. Web workers are a simple means for web content to run scripts on background threads. This will make sure the main thread is free from getting stuck. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener noreferrer" class=" styled-link">Learn more about web workers on MDN</a>.</p><p>XCalc never blocked the main thread (on my laptop and my phone), it worked without any problems. There were no performance issues at all. But, on the low-end phones, performance issues might rise.</p><p>And, it's a good idea to use the main thread only for UI work. That's why the main thread is called &quot;UI thread&quot; on other platforms. So, I moved the evaluations of the input to a web worker.</p><h3 id="offline-support" class="linkable-head"><a href="/post/building-xcalc#offline-support" class="hashtag " data-is-internal>#</a><span>Offline support</span></h3><figure><blockquote cite="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#what_is_a_service_worker">Service workers are a special type of web workers. A service worker is essentially a JavaScript file that runs separately from the main browser thread (or UI thread), intercepting network requests, caching or retrieving resources from the cache, and delivering push messages.</blockquote><figcaption><cite>Google Developers Blog(<a href="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#what_is_a_service_worker" target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>With the use of service workers, web apps can now deliver a custom offline experience. For example, YouTube and Spotify have a custom offline page. While searching for more examples, I found this <a href="https://sudoku.jull.dev/" target="_blank" rel="noopener noreferrer" class=" styled-link">awesome sudoku game</a>, which is completely available for offline use.</p><p>Like that sudoku game, XCalc doesn’t need an active internet connection to work. So, as you may guess, I wanted to make XCalc completely offline, just like that game. So, I added a service worker to do that. It pre-caches all the required resources. After that, the resources will be loaded from the cache.</p><h3 id="webassembly-(assemblyscript)" class="linkable-head"><a href="/post/building-xcalc#webassembly-(assemblyscript)" class="hashtag " data-is-internal>#</a><span><a href="https://webassembly.org" target="_blank" rel="noopener noreferrer" class=" styled-link">WebAssembly</a> (<a href="https://www.assemblyscript.org" target="_blank" rel="noopener noreferrer" class=" styled-link">AssemblyScript</a>)</span></h3><p>WebAssembly (WASM, in short) is a new type of code that can be run inside web browsers. It is a low-level assembly-like language which runs with near-native performance.
But, <strong>keep in mind that WASM is not intended to replace JS, and it won’t</strong>.</p><p>I recently became aware of WebAssembly, which was first introduced in 2017, and decided to use it in XCalc. Although WebAssembly wasn't meant to be used in a calculator app like XCalc, I chose to use it for learning and experimentation.</p><p>C, C++, Rust can be compiled to WASM. But I didn't know any of them (I still don't). And I didn't want to learn them. Fortunately, I came to know about AssemblyScript. AssemblyScript is a typescript-based language which compiles to WASM. With the familiar syntax, AssemblyScript appeared to be the best option for me. So, I chose to use it.</p><p>Getting started with AssemblyScript was a little hard for me. But, maybe, that was mostly because I didn't read the documentation clearly.</p><h2 id="conclusion" class="linkable-head"><a href="/post/building-xcalc#conclusion" class="hashtag " data-is-internal>#</a><span>Conclusion</span></h2><p>Overall, working on XCalc was a really great experience for me. There was a lot of fun and learning.</p><p>Here is the main thing I learnt while building XCalc.</p><p><strong>Read the documentation clearly</strong>. One of my bad habits is not reading documentation thoroughly. I always miss something in every documentation I read, which has caused me to spend a significant amount of time trying to figure out how to do something that was already explained in the documentation. When reading documentation for something, it is important to read it thoroughly and not skip anything. When you encounter a bug or an error, make sure your have checked the official documentation, before searching for solutions in other places.</p><p>If you have read this much, Thank you for your time. Have any questions? Feel free to <a href="https://twitter.com/sahithyandev" target="_blank" rel="noopener noreferrer" class=" styled-link">reach me out on Twitter</a></p>]]></description><link>https://sahithyandev.github.io/post/building-xcalc</link><guid isPermaLink="true">https://sahithyandev.github.io/post/building-xcalc</guid></item><item><title><![CDATA[JavaScript Shorthands]]></title><description><![CDATA[<section class="toc-container"><h3>Table Of Contents</h3><ol><li><a href="/post/javascript-shorthands#parseint()" data-is-internal class=" styled-link">parseInt()</a></li><li><a href="/post/javascript-shorthands#math.floor()" data-is-internal class=" styled-link">Math.floor()</a></li><li><a href="/post/javascript-shorthands#string-to-boolean" data-is-internal class=" styled-link">String to Boolean</a></li><li><a href="/post/javascript-shorthands#if-else-statement" data-is-internal class=" styled-link">If-Else statement</a></li><li><a href="/post/javascript-shorthands#xor-gate?" data-is-internal class=" styled-link">XOR gate?</a></li><li><a href="/post/javascript-shorthands#string.split('')" data-is-internal class=" styled-link">string.split('')</a></li></ol></section><h2 id="parseint()" class="linkable-head"><a href="/post/javascript-shorthands#parseint()" class="hashtag " data-is-internal>#</a><span>parseInt()</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
</code></pre><p>parseInt is a function in JavaScript which is used to convert a string to a number. There is an awesome shorthand is available for parseInt. “+” is the shorthand. It’s very easy when writing a 1000-line-JS.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
</code></pre><p>It works with <strong>parseFloat()</strong> too.</p><h2 id="math.floor()" class="linkable-head"><a href="/post/javascript-shorthands#math.floor()" class="hashtag " data-is-internal>#</a><span>Math.floor()</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">14.45</span><span class="token punctuation">;</span>
<span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span>
</code></pre><p>Math.floor is a function that is used to return the largest integer value that is less than or equal to a number. <strong>“~~”</strong> is the shorthand for this function. I hope you have a smile now.</p><pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 14</span>
</code></pre><h2 id="string-to-boolean" class="linkable-head"><a href="/post/javascript-shorthands#string-to-boolean" class="hashtag " data-is-internal>#</a><span>String to Boolean</span></h2><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> strValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span>
strValue <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><p>I am sure you will think that this is the shorthand. But there is a even short way for this too. The operator used above is called a Ternary operator. You can use this as a shorthand for an If-Else loop. The below code is a shorthand for the string to boolean conversion. It also works for number values too.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> boolValue <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>strValue<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><h2 id="if-else-statement" class="linkable-head"><a href="/post/javascript-shorthands#if-else-statement" class="hashtag " data-is-internal>#</a><span>If-Else statement</span></h2><p>As mentioned earlier, you can use the ternary operator as shorthand for the If-Else statement-based assignment. But when using multiline-blocks in If-Else statement, the ternary operator wants to be extended as shown below.</p><pre class="language-js"><code class="language-js">age <span class="token operator">></span> <span class="token number">13</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
<span class="token comment">// age is higher than 13</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
<span class="token comment">// age is not higher than 13</span>
<span class="token punctuation">)</span>
</code></pre><h2 id="xor-gate?" class="linkable-head"><a href="/post/javascript-shorthands#xor-gate?" class="hashtag " data-is-internal>#</a><span>XOR gate?</span></h2><p>We all know AND-OR gates. We use them in many places. Some of them may have heard the XOR gate. It is a mixture of AND-OR concepts. Here is the truth table for the XOR gate. for more.</p><table><thead><tr><th>A</th><th>B</th><th>A XOR B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>The XOR gate returns true if the number of inputs is odd. Sometimes we want this too. AND and OR can be accessed in JS with &amp;&amp; and || operators respectively. But how we can access XOR?</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span>
    <span class="token boolean">false</span><span class="token punctuation">(</span>
        <span class="token comment">// these will work as XOR.</span>
        <span class="token constant">A</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">B</span>
    <span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">A</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
        <span class="token comment">// true</span>
        <span class="token constant">A</span> <span class="token operator">+</span> <span class="token constant">B</span>
    <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token constant">A</span> <span class="token operator">+</span> <span class="token operator">!</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><p>But the above code is too big and we want a lot of time to write it without any problem. The problem can be solved with just a “^”.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Shorthand</span>
<span class="token constant">A</span> <span class="token operator">^</span> <span class="token constant">B</span><span class="token punctuation">;</span> <span class="token comment">// ^ works as XOR</span>
</code></pre><p>The above short-handed code will work. But there is a small problem with the operator, it returns a number instead of a boolean. You can simply convert it into a boolean with the shorthand #3.</p><h2 id="string.split('')" class="linkable-head"><a href="/post/javascript-shorthands#string.split('')" class="hashtag " data-is-internal>#</a><span>string.split('')</span></h2><p>Sometimes, we want to split a string into one-letter-array as shown below.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Sahithyan&quot;</span><span class="token punctuation">;</span> <span class="token comment">// my name</span>
<span class="token keyword">let</span> letters <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [S, a, h, i, t, h, y, a, n]</span>
</code></pre><p>In most cases, it’s ok to write .split(‘’) one or two times in our code. But when we want to split a string into a letter array, this gets horrible. But, fortunately, there is a shorthand for the split method.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Sahithyan&quot;</span><span class="token punctuation">;</span> <span class="token comment">// my name</span>
<span class="token keyword">let</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [S, a, h, i, t, h, y, a, n]</span>
</code></pre><p>Unfortunately, I don’t know what happens there. if you know, please tell that in the comments. But I am sure that it works.</p>]]></description><link>https://sahithyandev.github.io/post/javascript-shorthands</link><guid isPermaLink="true">https://sahithyandev.github.io/post/javascript-shorthands</guid></item><item><title><![CDATA[Divisibility Rules - An Explanation]]></title><description><![CDATA[<p>How much time would you need to check if a given number is divisible by 2 –15 without a computer? Well, for the first few numbers, you would be so fast. But you will get stuck at 7 or 13 right? Don’t worry. After reading this article, you won’t. Give it a try.</p><section class="toc-container"><h3>Table Of Contents</h3><ol><li><a href="/post/divisibility-rules#&quot;the-obvious-technique&quot;" data-is-internal class=" styled-link">&quot;The Obvious Technique&quot;</a></li><li><a href="/post/divisibility-rules#elementary-rules" data-is-internal class=" styled-link">Elementary Rules</a><ul><li><a href="/post/divisibility-rules#10" data-is-internal class=" styled-link">10</a></li><li><a href="/post/divisibility-rules#2,-5-(n)" data-is-internal class=" styled-link">2, 5 (n)</a></li><li><a href="/post/divisibility-rules#3,-9-(n)" data-is-internal class=" styled-link">3, 9 (n)</a></li><li><a href="/post/divisibility-rules#4,-8" data-is-internal class=" styled-link">4, 8</a></li><li><a href="/post/divisibility-rules#6" data-is-internal class=" styled-link">6</a></li></ul></li><li><a href="/post/divisibility-rules#the-unknown-rules" data-is-internal class=" styled-link">The Unknown Rules</a><ul><li><a href="/post/divisibility-rules#7,-11,-13,-17-(n)" data-is-internal class=" styled-link">7, 11, 13, 17 (n)</a></li><li><a href="/post/divisibility-rules#for-all-the-other-numbers" data-is-internal class=" styled-link">For all the other numbers</a></li></ul></li></ol></section><p>First of all, for those who don't know,</p><figure><blockquote cite="https://en.wikipedia.org/wiki/Divisibility_rule">A divisibility rule is a shorthand way of determining whether a given integer is divisible by a fixed divisor without performing the division, usually by examining its digits.</blockquote><figcaption><cite>Wikipedia(<a href="https://en.wikipedia.org/wiki/Divisibility_rule" target="_blank" rel="noopener noreferrer" class=" styled-link">@</a>)</cite></figcaption></figure><p>That being said, we are good to go.</p><h2 id="&quot;the-obvious-technique&quot;" class="linkable-head"><a href="/post/divisibility-rules#&quot;the-obvious-technique&quot;" class="hashtag " data-is-internal>#</a><span>&quot;The Obvious Technique&quot;</span></h2><p>Before diving into the number-specific rules, I would like to explain to you an obvious technique, that can be done for any number. (I am almost sure that you know about this technique. But I am going to explain it anyway.)</p><p>Let’s say that we want to check if p is divisible by q. <strong>The divisibility of p by q is conserved if we add or subtract a multiple of q to or from p</strong>. We can use this rule to reduce the big numbers into small ones which makes it easy for us to check if they are divisible.</p><img class="block" alt="Checking if 3056 is divisible by 27" src="/post__images/divisibility-rules/The Obvious Rule.png" width="600" height="257" /><p>For example, let’s say that we want to check if 3056 is divisible by 27. We can do that using the above-mentioned technique. I will subtract 2700 and then 297 (which are both divisible by 27), from 3056.</p><p>As it comes down to 69, which is not divisible by 27, 3056 is also not divisible by 27.</p><p>It can be long and hard most of the time. But in some cases, it can be easy and fast (for example, checking if 5430 is divisible by 27). We will use this process in some (if not all) rules in this story. I will refer to this technique as the <em>Basic Technique</em> in this story.</p><p>Note: <strong>iff</strong> means <em>if and only if</em>, for example, <em>A iff B</em> means, A is true if and only if B is true.</p><p>Also, note that I am talking about divisibility rules in the “Decimal Number System”. You can find divisibility rules in other number systems with the ideas gathered from here. <em>If you think of yourself as a nerd, try to find divisibility rules in binary and octal number systems</em>.</p><h2 id="elementary-rules" class="linkable-head"><a href="/post/divisibility-rules#elementary-rules" class="hashtag " data-is-internal>#</a><span>Elementary Rules</span></h2><p>Before we dive into the main rules, I want to explain some of the elementary rules that everyone knows. <em>These are sorted from easy to hard</em>.</p><h3 id="10" class="linkable-head"><a href="/post/divisibility-rules#10" class="hashtag " data-is-internal>#</a><span>10</span></h3><p><strong>Check if the last number is 0</strong>. I know that I shouldn’t include it here. But whatever. And as it is so obvious, let’s move on.</p><h3 id="2,-5-(n)" class="linkable-head"><a href="/post/divisibility-rules#2,-5-(n)" class="hashtag " data-is-internal>#</a><span>2, 5 (n)</span></h3><p><strong>Check if the last digit is divisible by n</strong>. I would like to explain why. You can skip the next paragraph if you want.</p><p>Take a number in the format of <em>ABC (where 0 ≤ A, B, C ≤ 9)</em> (It doesn’t have to be a 3-digit number; it can any number of digits).</p><p>Everyone knows that <em>ABC</em> can be written as <em>AB0 + 00C</em>. We know that <em>AB0</em> is divisible by 2, 5, 10 (because the last digit is 0). As mentioned in the <em>Basic Technique</em>, <em>00C</em>’s divisibility of 2 is the same as <em>ABC</em>’s. So checking the last digit is enough.</p><p>I also want to say that 2, 5, 10 are the only numbers that have the “<em>check the last digit</em>” divisibility-rule type.</p><h3 id="3,-9-(n)" class="linkable-head"><a href="/post/divisibility-rules#3,-9-(n)" class="hashtag " data-is-internal>#</a><span>3, 9 (n)</span></h3><p>These two are also easy, but you can’t tell it instantly like 2 or 5. <strong>Add up the digits of the number, and see if it is divisible by n</strong>. These are the only numbers that have the “<em>add up the digits to check</em>” divisibility-rule type.</p><p>For example, 12049’s digits add up to 16. So 12049 is not divisible by both 3 and 9 as 16 is not divisible by both 3 and 9.</p><h3 id="4,-8" class="linkable-head"><a href="/post/divisibility-rules#4,-8" class="hashtag " data-is-internal>#</a><span>4, 8</span></h3><p>4 and 8’s divisibility rules are like 2's. But instead of checking the last digit, you have to <strong>check the last 2 digits for 4 and check the last 3 digits for 8</strong>.</p><h3 id="6" class="linkable-head"><a href="/post/divisibility-rules#6" class="hashtag " data-is-internal>#</a><span>6</span></h3><p><strong>A number is divisible by 6 iff the number is divisible by both 2 and 3</strong>. So do the rules for 2 and 3 on the number, and if both ended up true, then the number is divisible by 6.</p><h2 id="the-unknown-rules" class="linkable-head"><a href="/post/divisibility-rules#the-unknown-rules" class="hashtag " data-is-internal>#</a><span>The Unknown Rules</span></h2><p>As you are clear about the basic rules for divisibility testing, we can start looking at some lesser known rules.</p><p>I am not going to explain the general cases anymore. Because it would be so hard for both you and me. I will just explain with an example.</p><h3 id="7,-11,-13,-17-(n)" class="linkable-head"><a href="/post/divisibility-rules#7,-11,-13,-17-(n)" class="hashtag " data-is-internal>#</a><span>7, 11, 13, 17 (n)</span></h3><p>These numbers share the same kind of pattern in their divisibility rules, so I grouped them.</p><p>I am going to show you how to check if 54012 is divisible by 7. First, observe this example. Then choose a different number and see if you really understood it.</p><img class="block" alt="Checking if 54012 is divisible by 7" src="/post__images/divisibility-rules/Divisibility Rule - 7.svg" width="600" height="360" /><p>54012, so the last number is 2 and the other numbers are 5401. So I am going to subtract 4 (2 times the last number) from 5401, and I get 5397.
As I am not sure if it is divisible by 7, I am going to do it again. I am repeating this process until I get 41 which I know is not divisible by 7. So we can conclude that 54012 is not divisible by 7.</p><p>I will refer to this technique as “<em>Recursive Technique</em>”.</p><p>To check if a number is divisible by 11 or 13 or 17, you have to follow the same process. For 7, we multiplied the last digit by 2. For other numbers, have to multiply it with a different number, based on the below table.</p><table><thead><tr><th>n</th><th>multiply with</th></tr></thead><tbody><tr><td>7</td><td>2</td></tr><tr><td>11</td><td>1</td></tr><tr><td>13</td><td>9</td></tr><tr><td>17</td><td>5</td></tr></tbody></table><p>We will see why these specific numbers are used.  </p><h3 id="for-all-the-other-numbers" class="linkable-head"><a href="/post/divisibility-rules#for-all-the-other-numbers" class="hashtag " data-is-internal>#</a><span>For all the other numbers</span></h3><p>This may sound stupid to you. But wait, I am not saying that every single number has ONE simple divisibility rule. I am just saying that there are some techniques that you can use to find a number’s divisibility rule.</p><p>First, you have to <strong>see if it is a power of 2 or 5</strong>. Let’s say that the number is nth power of 2 or 5. Then check for the last n digits. That’s enough. This is why I told you to check for the last 2 digits for 4 (2²) and 3 digits for 8 (2³).
The explanation for this is quite easy. 10 is divisible by 2 and 5, so 10’s nth power is divisible by the nth power of both 2 and 5. I hope you can finish the explanation on your own. [Refer to the 2, 5’s explanation]
Don’t be sad if it is not a power of 2 or 5, we have more techniques.</p><p>Next, <strong>Check if any of its multiples have 1 as the last digit</strong>. For example, 7 has 21, 9 has 81, 11 has 11, 13 has 91, 17 has 51, and so on. If it does, you can do the <em>Recursive Technique</em>. But you have to multiply the last digit with a number. How do you select the number? I hope the table below gives you an idea.</p><table><thead><tr><th>n</th><th></th><th>multiply with</th></tr></thead><tbody><tr><td>7</td><td>2<em>1</em></td><td>2</td></tr><tr><td>11</td><td>1<em>1</em></td><td>1</td></tr><tr><td>13</td><td>9<em>1</em></td><td>9</td></tr><tr><td>17</td><td>5<em>1</em></td><td>5</td></tr></tbody></table><p>You have to multiply by the number you get after crossing out the last “1”. But why?, we are just doing the <em>Basic Technique</em>. Think about it.</p><p>And I have one more trick which works for non-primes. Let’s say we want to check if p is divisible by q. We can do that by checking if <em>p</em> is divisible by all (or some) of the factors of <em>q</em>. In most cases, it can be hard to do, but sometimes it can be helpful.</p><p>For example, 6, we check for its factors (2, 3). It’s so easy in the case of 6 because we have to check for only 2 and 3. But what about other numbers that have many factors? For those numbers, there is an easy way too. Instead of checking for all of the factors of <em>q</em>, you can just check it for 2 numbers. But how would you select those two numbers? <strong>Those two numbers must fulfil these 2 conditions</strong>.</p><ol><li>Their <a href="(https://en.wikipedia.org/wiki/Greatest_common_divisor)" target="_blank" rel="noopener noreferrer" class=" styled-link">greatest common divisor (GCD)</a> is 1.</li><li>when multiplied, they give <em>q</em>.</li></ol><p>With these tricks and techniques, you can check if a number is divisible by any number between 2 and 28 in 10 seconds. You can go for other numbers too, but it may take longer. But as you use them again and again, you will slowly become fast.</p><p>PS: The <em>Basic Technique</em> and the <em>Recursive Technique</em> are not mathematical terms. I am just naming them just for the sake of reference.</p>]]></description><link>https://sahithyandev.github.io/post/divisibility-rules</link><guid isPermaLink="true">https://sahithyandev.github.io/post/divisibility-rules</guid></item></channel></rss>