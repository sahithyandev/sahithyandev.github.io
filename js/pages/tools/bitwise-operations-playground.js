import{h as t,c as e,p as i,u as n,d as l,a,s as u,e as r}from"../../signals-d4e349df.js";const o=e=>t("aside",{class:(e.type?[`type-${e.type}`]:[]).concat("note").join(" ")},e.children);function s(n){return n.idPrefix=n.idPrefix||"",n.checked||(n.checked=e((n.options.find((t=>t.checked))||n.options[0]).id)),n.options.forEach((t=>{void 0===t.displayText&&(t.displayText=t.id),void 0===t.value&&(t.value=t.id)})),t("div",{class:"one-push-switch"},n.options.map(((e,l)=>{const a=l==n.options.length-1?n.options[0]:n.options[l+1],u=n.idPrefix+a.id;return t(i,{key:e.id},t("input",{class:"sr-only",type:"radio",name:n.name,id:n.idPrefix+e.id,checked:n.checked.value==e.value,value:e.value,onInput:t=>n.checked.value=t.target.value}),t("label",{htmlFor:u,title:a.title},e.displayText))})))}const p={and:"&",or:"|",xor:"^",not:"~"},h={right:">>",left:"<<"},c=e=>{const i=e.name,n=p[e.name]?e.name:e.name+" shift";return t("div",{class:"operator-display "+(n.includes("shift")?"shift":""),...e},t("div",{class:"symbol"},p[i]||h[i]),t("div",null,n))};function d(t){const e=t.map((t=>"0"===t?"1":"0"));return{outputBinary:e,output:parseInt(e.join(""),2)}}function v(t,e,i,n="logical"){let l;if("logical"==n){const n=new Array(e).fill("0");l="left"===i?t.slice(e).concat(n):n.concat(t.slice(0,-1*e))}else{let n;"left"==i?(n=t.slice(0,e),l=t.slice(e).concat(n)):(n=t.slice(-1*e),l=n.concat(t.slice(0,-1*e)))}return{outputBinary:l,output:parseInt(l.join(""),2)}}function g(t,e,i){return"not"==t?"0"===e?"1":"0":"and"==t?(n=i,"1"==e&&"1"==n?"1":"0"):"or"==t?((t,e)=>"0"==t&&"0"==e?"0":"1")(e,i):"xor"==t?((t,e)=>t==e?"0":"1")(e,i):void 0;var n}const b=({name:e,highlight:i})=>{const n=p[e],l="not"===e?1:2;return t("table",{class:"truth-table"},t("thead",null,"not"===e?t("tr",null,t("th",null,"A"),t("th",null,"A`")):t("tr",null,t("th",{style:"color: var(--blue);"},"A"),t("th",{style:"color: var(--pink);"},"B"),t("th",{style:"color: var(--yellow);"},"A ",n," B"))),t("tbody",null,function(e,i,n){const l=[];for(let a=0;a<Math.pow(2,i);a++){const u=a.toString(2).padStart(i,"0").split(""),r=g(e,u[0],u[1]);l.push(t("tr",{"data-highlight":n===a+1?"":void 0,key:a},u.map(((e,i)=>t("td",{key:a.toString().concat(i.toString())},e))),t("td",null,r)))}return l}(e,l,i)))},y=({digits:e,highlight:n})=>{const l=Array.isArray(n)?n:[n];return t(i,null,e.map(((e,i)=>t("span",{"data-highlight":l.includes(i)?"":void 0,key:e.concat(i.toString())},e))))},m=e=>t("input",{type:"number",id:e.id,value:e.value,onInput:t=>e.value.value=t.target.valueAsNumber,min:"0",step:"1",...e}),f=Object.keys(p).filter((t=>"not"!=t)),B=()=>{const e=n(48),i=n(27),u=n("and"),r={number1Binary:n(["1","1","0","0","0","0"]),number2Binary:n(["0","1","1","0","1","1"]),output:n(16),outputBinary:n(["0","1","0","0","0","0"]),highlightDigit:n(1),error:n(null)};l((()=>{const t=e.value,n=i.value,l=u.value;let a=null;if(Number.isInteger(t)?Number.isInteger(n)?t<=0?a=`${t} is not positive.`:n<=0&&(a=`${n} is not positive.`):a=`${n} is not an integer.`:a=`${t} is not an integer.`,null!=a)return void(r.error.value=a+" All inputs must be positive integers.");r.error.value=null;const o=t.toString(2),s=n.toString(2),p=Math.max(o.length,s.length),h=o.padStart(p,"0").split(""),c=s.padStart(p,"0").split("");r.number1Binary.value=h,r.number2Binary.value=c;const d=function(t,e,i){if(e.length!=i.length)throw console.log({n1Binary:e,n2Binary:i}),new Error("Lengths of the binary representations are not equal");const n=[];for(let l=0;l<e.length;l++){const a=e[l],u=i[l];"and"==t?n.push("1"==a&&"1"==u?"1":"0"):"or"==t?n.push("0"==a&&"0"==u?"0":"1"):n.push(a==u?"0":"1")}return{outputBinary:n,output:parseInt(n.join(""),2)}}(l,h,c);r.output.value=d.output,r.outputBinary.value=d.outputBinary}));const p=a((()=>{const t=r.highlightDigit.value-1,e=r.number1Binary.value[t]+r.number2Binary.value[t];return parseInt(e,2)+1}));return t("section",{class:"and-or-xor-section"},t("h3",null,"AND, OR, XOR"),t("div",{class:"input-form"},t(m,{id:"number-1",value:e,style:"grid-area: number-1;"}),t("div",{style:"grid-area: operator;"},t(s,{name:"operator-input",idPrefix:"operator-",checked:u,options:f.map((e=>({id:e,displayText:t(c,{name:e})})))})),t(m,{id:"number-2",value:i,style:"grid-area: number-2;"}),t("p",{class:"description",style:"grid-area: desc;"},"You can change the operation by clicking/pressing on the operator.")),null==r.error.value?t("div",{class:"explanation"},t("div",{class:"steps"},t("div",{class:"number-1","data-number":e.value},t(y,{digits:r.number1Binary.value,highlight:r.highlightDigit.value-1})),t("div",{class:"number-2","data-number":i.value},t(y,{digits:r.number2Binary.value,highlight:r.highlightDigit.value-1})),t("hr",{style:{marginTop:"18px",marginBottom:"-5px"}}),t("div",{class:"output","data-number":r.output.value},t(y,{digits:r.outputBinary.value,highlight:r.highlightDigit.value-1}))),t("div",{class:"text"},t("p",null,"We do the ",u.value.toUpperCase()," operation, bit by bit, on the binary representation of ",e,", ",i,". Use the controls below to step through the bits. The corresponding truth table is shown below."),t(b,{name:u.value,highlight:p.value})),t("div",{class:"controls"},t("button",{class:"styled-btn",onClick:()=>r.highlightDigit.value-=1,disabled:r.highlightDigit.value<=1},"Previous"),t("button",{class:"styled-btn",onClick:()=>r.highlightDigit.value+=1,disabled:r.highlightDigit.value==r.number1Binary.value.length},"Next"))):t(o,{type:"danger"},t("p",null,t("b",null,"Error: "),r.error.value)))},x=()=>{const e=n(23),a=n(1),r=n(null),s={inputBinary:n(["1","0","1","1","1"]),output:n(8),outputBinary:n(["0","1","0","0","0"])};l((()=>{const t=e.value;!Number.isInteger(t)||t<=0?r.value=`${t} is not a positive integer.`:(r.value=null,u((()=>{const e=t.toString(2).split("");s.inputBinary.value=e;const i=d(e);s.output.value=i.output,s.outputBinary.value=i.outputBinary})))}));const p={inputBinary:n(["1","0","1","1","1"]),output:n(8),outputBinary:n(["0","1","0","0","0"])};return l((()=>{const t=e.value,i=a.value;u((()=>{const e="0".repeat(i).concat(t.toString(2)).split("");p.inputBinary.value=e;const n=d(e);p.output.value=n.output,p.outputBinary.value=n.outputBinary}))})),t("section",{class:"not-section"},t("h3",null,"NOT"),t("div",{class:"input-form"},t(c,{name:"not",style:"grid-area: operator;"}),t(m,{id:"number",value:e,style:"grid-area: number;"}),t("div",{class:"steps",style:"margin: 0 auto; width: fit-content; grid-area: steps;"},null==r.value?t(i,null,t("div",{class:"number-1","data-number":e.value},t(y,{digits:s.inputBinary.value})),t("div",{class:"number-2","data-number":s.output.value},t(y,{digits:s.outputBinary.value}))):t(i,null,t(o,{type:"danger"},t("p",null,t("b",null,"Error:")," ",r.value))))),null==r.value?t(i,null,t("p",null,"I want to mention a point which might cause confusion while getting started with bitwise NOT operation.",t("br",null),"In a bitwise NOT operation, all the leading zeros will be flipped to a 1. This means varying number of leading zeros produce different outputs from the same input.",t("br",null),"Use the buttons below to add/remove leading zeros to see what outputs are produced. You can see the output value (",p.output.value,") changes even though the input value (",e.value,") doesn't."),t("div",{class:"steps",style:"margin: 0 auto 30px; width: fit-content;"},t("div",{class:"number-1","data-number":e.value},t(y,{digits:p.inputBinary.value})),t("div",{class:"number-2","data-number":p.output.value},t(y,{digits:p.outputBinary.value}))),t("div",{class:"controls"},t("button",{class:"styled-btn",onClick:()=>a.value-=1,disabled:a.value<=0},"Remove"),t("span",null,a," leading zeros"),t("button",{class:"styled-btn",onClick:()=>a.value+=1,disabled:a.value+s.inputBinary.value.length>=20},"Add"))):null)},T=()=>{const e=n(27),a=n(1),p=n("right"),d={number1Binary:n(["1","1","0","1","1"]),inputHighlight:n([0]),outputHighlight:n([4]),error:n(null),logical:{output:n(13),outputBinary:n(["0","1","1","0","1"]),explanation:{blueText:n("The right-most digit"),pinkText:n("The vacant bit on the left side")}},circular:{output:n(27),outputBinary:n(["1","1","0","1","1"]),explanation:{blueText:n("the bit pushed off from the right side"),pinkText:n("The vacant bit on the left side")}}};l((()=>{const t=[],i=[],n=e.value,l=a.value;if(!Number.isInteger(n)||n<=0)return void(d.error.value=`${n} is not a positive integer.`);if(!Number.isInteger(l)||l<=0)return void(d.error.value=`${l} is not a positive integer.`);d.error.value=null;const r=e.value.toString(2).split(""),o=a.value<1?1:Math.min(a.value,r.length);for(let e=0;e<o;e++)i.push(e),t.push(r.length-1-e);u((()=>{const e=v(r,o,p.value,"logical"),n=v(r,o,p.value,"circular");d.number1Binary.value=r,d.inputHighlight.value="right"===p.value?t:i,d.outputHighlight.value="right"===p.value?i:t,d.logical.output.value=e.output,d.logical.outputBinary.value=e.outputBinary,d.circular.output.value=n.output,d.circular.outputBinary.value=n.outputBinary,d.logical.explanation.blueText.value=`The ${1===o?"":a} ${p.value}-most digit ${1===o?"":"s"}`,d.logical.explanation.pinkText.value=`The vacant bit${1==o?"":"s"} on the ${"left"===p.value?"right":"left"} side`,d.circular.explanation.blueText.value=`the bit${1===o?"":"s"} pushed off from the ${p} side.`,d.circular.explanation.pinkText.value=`The vacant bit${1==o?"":"s"} on the ${"left"===p.value?"right":"left"} side`}))}));const g=r((()=>{const t=e.value.toString(2).split("");return 1===Math.min(a.value,t.length)?"is":"are"}));return t("section",{class:"left-right-shift-section"},t("h3",null,"SHIFTS"),t("p",null,"The shift is done on binary representation of the first operand. The second operand is the number of positions to be shifted."),t("div",{class:"input-form"},t(m,{value:e,id:"shift-".concat("number-1"),style:"grid-area: number-1;"}),t("div",{style:"grid-area: operator;"},t(s,{name:"shift-input",idPrefix:"shift-",checked:p,options:Object.keys(h).map((e=>({id:e,displayText:t(c,{name:e})})))})),t(m,{value:a,id:"shift-".concat("number-2"),style:"grid-area: number-2;",min:1,max:d.number1Binary.value.length}),t("p",{class:"description",style:"grid-area: desc;"},"You can change the operation by pressing on the operator.")),a.value>d.number1Binary.value.length||null!=d.error.value?t(o,{type:"danger"},t("p",null,null!=d.error.value?t(i,null,t("b",null,"Error:")," ",d.error):`${e.value} is represented by ${d.number1Binary.value.length} bits here and you are trying to shift ${a.value} bits. The bits are shifted ${d.number1Binary.value.length} positions only.`)):null,null==d.error.value?t(i,null,t("h4",null,"LOGICAL SHIFT"),t("div",{class:"explanation"},t("div",{class:"steps",style:"width: fit-content; margin: 0 auto;"},t("div",{style:"--color: var(--blue);","data-number":e.value},t(y,{digits:d.number1Binary.value,highlight:d.inputHighlight.value})),t("div",{style:"--color: var(--pink);","data-number":d.logical.output.value},t(y,{digits:d.logical.outputBinary.value,highlight:d.outputHighlight.value}))),t("p",null,t("span",{style:"color: var(--blue);"},d.logical.explanation.blueText)," ",g," shifted off.",t("br",null),t("span",{style:"color: var(--pink);"},d.logical.explanation.pinkText)," ",g," filled with 0.")),t("h4",null,"CIRCULAR SHIFT"),t("div",{class:"explanation"},t("div",{class:"steps",style:"width: fit-content; margin: 0 auto;"},t("div",{style:"--color: var(--blue);","data-number":e.value},t(y,{digits:d.number1Binary.value,highlight:d.inputHighlight.value})),t("div",{style:"--color: var(--pink);","data-number":d.circular.output.value},t(y,{digits:d.circular.outputBinary.value,highlight:d.outputHighlight.value}))),t("p",null,t("span",{style:"color: var(--pink);"},d.circular.explanation.pinkText)," ",g," filled with"," ",t("span",{style:"color: var(--blue);"},d.circular.explanation.blueText)))):null,t("p",null,"When dealing with unsigned integers, arithmetic shift is analogus to logical shift. That's why I have excluded it above."))};function k(){return t(i,null,t("main",null,t("h2",{style:"margin-bottom: 40px;"},"Bitwise Operations Playground"),t(o,null,t("p",null,"I am assuming you have a basic understanding of the binary number system, conversion between the decimal and binary number systems, and the logical operations.")),t(B,null),t(x,null),t(T,null)))}export{k as default};
