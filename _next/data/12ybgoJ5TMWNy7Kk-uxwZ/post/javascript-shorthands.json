{"pageProps":{"meta":{"title":"JavaScript Shorthands","description":"Do you write JavaScript a lot? These shorthands might be helpful to you.","dateCreated":1617776524357,"tags":["javascript"],"estReadTime":4,"lastModifiedTime":1624772421868,"slug":"javascript-shorthands"},"sourceContent":"\r\n<!-- TODO fix this introduction -->\r\n<!-- I love JavaScript, I hope you too. JavaScript is super-simple for beginners, even it has many WTF situations. By using shorthands, you can be more productive & you can impress your friends when coding. I want to show you some shorthands in JavaScript. They’re great. -->\r\n\r\n<TableOfContents source={sourceContent} />\r\n\r\n## parseInt()\r\n\r\n```js\r\nlet x = \"11\"\r\nconsole.log(parseInt(x)) // 100\r\n```\r\n\r\nparseInt is a function in JavaScript which is used to convert a string to a number. There is an awesome shorthand is available for parseInt. “+” is the shorthand. It’s very easy when writing a 1000-line-JS.\r\n\r\n```js\r\nlet y = \"100\"\r\nconsole.log(+y) // 100\r\n```\r\n\r\nIt works with **parseFloat()** too.\r\n\r\n## Math.floor()\r\n\r\n```js\r\nlet z = 14.45\r\nMath.floor(z) // 14\r\n```\r\n\r\nMath.floor is a function that is used to return the largest integer value that is less than or equal to a number. **“~~”** is the shorthand for this function. I hope you have a smile now.\r\n\r\n```js\r\nconsole.log(~~z) // returns 14 \r\n```\r\n\r\n## String to Boolean\r\n\r\n```js\r\nlet strValue = \"true\"\r\nstrValue == \"true\" ? true : false // true\r\n```\r\n\r\nI am sure you will think that this is the shorthand. But there is a even short way for this too. The operator used above is called a Ternary operator. You can use this as a shorthand for an If-Else loop. The below code is a shorthand for the string to boolean conversion. It also works for number values too.\r\n\r\n```js\r\nlet boolValue = !!strValue // true\r\n```\r\n\r\n## If-Else statement\r\n\r\nAs mentioned earlier, you can use the ternary operator as shorthand for the If-Else statement-based assignment. But when using multiline-blocks in If-Else statement, the ternary operator wants to be extended as shown below.\r\n\r\n```js\r\nage > 13 ? (\r\n// age is higher than 13\r\n) : (\r\n// age is not higher than 13\r\n)\r\n```\r\n\r\n## XOR gate?\r\n\r\nWe all know AND-OR gates. We use them in many places. Some of them may have heard the XOR gate. It is a mixture of AND-OR concepts. Here is the truth table for the XOR gate. for more.\r\n\r\n|A|B|A XOR B|\r\n|-|-|-------|\r\n|0|0|   0   |\r\n|0|1|   1   |\r\n|1|0|   1   |\r\n|1|1|   0   |\r\n\r\nThe XOR gate returns true if the number of inputs is odd. Sometimes we want this too. AND and OR can be accessed in JS with && and || operators respectively. But how we can access XOR?\r\n\r\n```js\r\nlet A = true\r\nlet B = false\r\n\r\n// these will work as XOR.\r\n(A && !B) || (!A && B) // true\r\n(A + B) && (!A + !B) // true\r\n```\r\n\r\nBut the above code is too big and we want a lot of time to write it without any problem. The problem can be solved with just a “^”.\r\n\r\n```js\r\n// Shorthand\r\nA ^ B // ^ works as XOR\r\n```\r\n\r\nThe above short-handed code will work. But there is a small problem with the operator, it returns a number instead of a boolean. You can simply convert it into a boolean with the shorthand #3.\r\n\r\n## string.split('')\r\n\r\nSometimes, we want to split a string into one-letter-array as shown below.\r\n\r\n```js\r\nlet name = \"Sahithyan\" // my name\r\nlet letters = name.split('') // [S, a, h, i, t, h, y, a, n]\r\n```\r\n\r\nIn most cases, it’s ok to write .split(‘’) one or two times in our code. But when we want to split a string into a letter array, this gets horrible. But, fortunately, there is a shorthand for the split method.\r\n\r\n```js\r\nlet name = \"Sahithyan\" // my name\r\nlet letters = [...name] // [S, a, h, i, t, h, y, a, n]\r\n```\r\n\r\nUnfortunately, I don’t know what happens there. if you know, please tell that in the comments. But I am sure that it works.\r\n","mdxSource":{"compiledSource":"var N=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,n,t)=>n in e?N(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&c(e,t,n[t]);if(o)for(var t of o(n))r.call(n,t)&&c(e,t,n[t]);return e},m=(e,n)=>d(e,u(n));var l=(e,n)=>{var t={};for(var s in e)p.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&o)for(var s of o(e))n.indexOf(s)<0&&r.call(e,s)&&(t[s]=e[s]);return t};const makeShortcode=e=>function(t){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",a({},t))},TableOfContents=makeShortcode(\"TableOfContents\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:e}=s,n=l(s,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(TableOfContents,{source:sourceContent,mdxType:\"TableOfContents\"}),mdx(\"h2\",null,\"parseInt()\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" x \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"11\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token console class-name\"}),\"console\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token method function property-access\"}),\"log\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"parseInt\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"x\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// 100\"),`\n`)),mdx(\"p\",null,\"parseInt is a function in JavaScript which is used to convert a string to a number. There is an awesome shorthand is available for parseInt. \\u201C+\\u201D is the shorthand. It\\u2019s very easy when writing a 1000-line-JS.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" y \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"100\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token console class-name\"}),\"console\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token method function property-access\"}),\"log\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\"y\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// 100\"),`\n`)),mdx(\"p\",null,\"It works with \",mdx(\"strong\",{parentName:\"p\"},\"parseFloat()\"),\" too.\"),mdx(\"h2\",null,\"Math.floor()\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" z \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"14.45\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token known-class-name class-name\"}),\"Math\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token method function property-access\"}),\"floor\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"z\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// 14\"),`\n`)),mdx(\"p\",null,\"Math.floor is a function that is used to return the largest integer value that is less than or equal to a number. \",mdx(\"strong\",{parentName:\"p\"},\"\\u201C~~\\u201D\"),\" is the shorthand for this function. I hope you have a smile now.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token console class-name\"}),\"console\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token method function property-access\"}),\"log\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"~\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"~\"),\"z\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// returns 14 \"),`\n`)),mdx(\"h2\",null,\"String to Boolean\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" strValue \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),`\nstrValue `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"?\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// true\"),`\n`)),mdx(\"p\",null,\"I am sure you will think that this is the shorthand. But there is a even short way for this too. The operator used above is called a Ternary operator. You can use this as a shorthand for an If-Else loop. The below code is a shorthand for the string to boolean conversion. It also works for number values too.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" boolValue \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\"strValue \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// true\"),`\n`)),mdx(\"h2\",null,\"If-Else statement\"),mdx(\"p\",null,\"As mentioned earlier, you can use the ternary operator as shorthand for the If-Else statement-based assignment. But when using multiline-blocks in If-Else statement, the ternary operator wants to be extended as shown below.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),\"age \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"13\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"?\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// age is higher than 13\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// age is not higher than 13\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`)),mdx(\"h2\",null,\"XOR gate?\"),mdx(\"p\",null,\"We all know AND-OR gates. We use them in many places. Some of them may have heard the XOR gate. It is a mixture of AND-OR concepts. Here is the truth table for the XOR gate. for more.\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",a({parentName:\"tr\"},{align:null}),\"A\"),mdx(\"th\",a({parentName:\"tr\"},{align:null}),\"B\"),mdx(\"th\",a({parentName:\"tr\"},{align:null}),\"A XOR B\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",a({parentName:\"tr\"},{align:null}),\"0\")))),mdx(\"p\",null,\"The XOR gate returns true if the number of inputs is odd. Sometimes we want this too. AND and OR can be accessed in JS with && and || operators respectively. But how we can access XOR?\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// these will work as XOR.\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"||\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// true\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// true\"),`\n`)),mdx(\"p\",null,\"But the above code is too big and we want a lot of time to write it without any problem. The problem can be solved with just a \\u201C^\\u201D.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Shorthand\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"A\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"^\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"B\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// ^ works as XOR\"),`\n`)),mdx(\"p\",null,\"The above short-handed code will work. But there is a small problem with the operator, it returns a number instead of a boolean. You can simply convert it into a boolean with the shorthand #3.\"),mdx(\"h2\",null,\"string.split('')\"),mdx(\"p\",null,\"Sometimes, we want to split a string into one-letter-array as shown below.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" name \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sahithyan\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// my name\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" letters \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token method function property-access\"}),\"split\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"''\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// [S, a, h, i, t, h, y, a, n]\"),`\n`)),mdx(\"p\",null,\"In most cases, it\\u2019s ok to write .split(\\u2018\\u2019) one or two times in our code. But when we want to split a string into a letter array, this gets horrible. But, fortunately, there is a shorthand for the split method.\"),mdx(\"pre\",a({},{className:\"language-js\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" name \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"Sahithyan\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// my name\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"let\"),\" letters \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token spread operator\"}),\"...\"),\"name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// [S, a, h, i, t, h, y, a, n]\"),`\n`)),mdx(\"p\",null,\"Unfortunately, I don\\u2019t know what happens there. if you know, please tell that in the comments. But I am sure that it works.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}