{"pageProps":{"meta":{"title":"Story of Building XCalc","description":"Sharing how I built XCalc, an extended calculator.","tags":["experience","project"],"dateCreated":1625911200000,"estReadTime":7,"slug":"building-xcalc"},"mdxSource":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TableOfContents, {\n    mdxType: \"TableOfContents\"\n  }), mdx(\"h2\", null, \"Why I built XCalc?\"), mdx(\"p\", null, \"We all have a pre-installed calculator app on our devices (except iPad users). They provide us with basic and some advanced operations. For the majority of people, in most cases, that is more than enough.\"), mdx(\"p\", null, \"But, as a Math lover, sometimes, I ran into some problems which can be solved easily on a computer (or a calculator), but still not included in any of these existing calculator apps.\\nFor example, prime factorization. It's easy for a small set of numbers (like 500, 360). But on a computer, it can be done in seconds (or even milliseconds). But I have never seen that functionality included in a calculator. And this is only one example. This felt like a gap for me. That\\u2019s why I decided to develop a calculator app that has these extra functions. That\\u2019s what XCalc is.\"), mdx(\"p\", null, \"Note that I only added the functions that are not available in those existing calculator apps. And I intentionally left out the functions like log or sqrt, because they are already available on the pre-installed calculator apps.\"), mdx(\"p\", null, \"So, what functions did I add? \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://x-calc.vercel.app/help\"\n  }, \"Here\"), \" is a list. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"is-prime: checks if a number is a prime number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"factors: finds all the factors of a number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lcm: finds the least common multiple of a list a numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"gcd: finds the greatest common divisor of a list a numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"factorial: finds the n-th factorial\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ratio: finds the minimum ratio in a list of numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nck: finds the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Binomial_coefficient\"\n  }, \"binomial coefficient\"), \" denoted by (n k)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prime-factorize: finds the prime factorization of the given number\")), mdx(\"p\", null, \"If you like the idea of XCalc, you can try it \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://bit.ly/xcalc-web\"\n  }, \"here\"), \". From the website, XCalc can be installed to your devices (I don\\u2019t know if it is supported on all operating systems and all browsers).\\nAnd \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://bit.ly/xcalc-app\"\n  }, \"XCalc is available on Google Play Store\"), \" as well.\"), mdx(\"p\", null, \"If you are interested to see how XCalc is coded, Good news, XCalc is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://github.com/sahithyandev/xcalc\"\n  }, \"open-sourced\"), \". If you find it hard to understand the code, let me know about that.\"), mdx(\"h2\", null, \"How I built it\"), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://typescriptlang.org\"\n  }, \"TypeScript\")), mdx(\"p\", null, \"TypeScript is a strict syntactical superset of JavaScript and adds optional strict typing to the language. It compiles to JavaScript.\"), mdx(\"p\", null, \"I decided to bring it into the codebase mainly for two reasons. The important one is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"prevention of many little bugs\"), \". As TypeScript allows me to set types to everything, now I don\\u2019t have to be too concerned about the code now. I can be confident (in most cases) that I am not gonna run into any runtime errors.\\nAnd the next one is, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reduced mind-overloading\"), \". Which means, now, I don\\u2019t have to memorize the function parameter types and object structures. My IDE's intellisense takes care of that.\"), mdx(\"h3\", null, \"UI Design\"), mdx(\"p\", null, \"It's highly recommended to design the UI before coding it. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=ZyAsNw7XZ1c\"\n  }, \"Here's why\"), \". \"), mdx(\"p\", null, \"Hence, I decided to design the whole UI first (or at least try). I opened up \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://figma.com\"\n  }, \"Figma\"), \" and gave it a try. Here's what I designed.\"), mdx(\"img\", {\n    alt: \"XCalc Old UI design\",\n    src: \"/post__images/building-xcalc/xcalc-old-design.jpg\"\n  }), mdx(\"p\", null, \"I went with it. Because, the important thing about XCalc is its functionality; not the UI.\"), mdx(\"p\", null, \"When I made XCalc completely working, (as always) I stopped working on it. After about 3 months, I came back. I decided to rewrite the whole app with new (better) technologies. As a part of that, I redesigned the UI. It turned out to be pretty great.\"), mdx(\"img\", {\n    alt: \"XCalc New UI design\",\n    src: \"/post__images/building-xcalc/xcalc-new-design.png\"\n  }), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://reactjs.org\"\n  }, \"React\")), mdx(\"p\", null, \"When I first started developing XCalc, I didn't use any front-end libraries. I wanted to write all the code by myself. The state of the app (the input), the dynamic UI rendering were all done by the code I wrote. At first, It worked without any problems.  But when I came back after 3 months, I understood none of it. That's when I realized that I should have used a front-end library.\"), mdx(\"p\", null, \"When I started rewriting the app, I chose to go with React, which is my favorite front-end library.\"), mdx(\"p\", null, \"To be honest, the React code is not that good either. But it is a lot more readable than my code.\"), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://sass-lang.com\"\n  }, \"Sass\")), mdx(\"p\", null, \"Sass is a pre-compiler for CSS. It provides some additional functionalities which results in a better developer experience. That\\u2019s the one and only reason I decided to use Sass.\"), mdx(\"h3\", null, \"Off-thread evaluations\"), mdx(\"p\", null, \"By default, the browser uses a single thread (\\\"main thread\\\") to run all the processes of a website. This is where the layout and paint are done. This is where the user events get processed. And also, this is where, the javascript runs. Which means, long-running JavaScript will block the thread, leading to an unresponsive page (== bad user experience)\"), mdx(\"p\", null, \"This is where web workers come into play. Web workers are a simple means for web content to run scripts on background threads. This will make sure the main thread is free from getting stuck. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\"\n  }, \"Learn more about web workers on MDN\"), \".\"), mdx(\"p\", null, \"XCalc never blocked the main thread (on my laptop and my phone), it worked without any problems. There were no performance issues at all. But, on the low-end phones, performance issues might rise.\"), mdx(\"p\", null, \"And, it's a good idea to use the main thread only for UI work. That's why the main thread is called \\\"UI thread\\\" on other platforms. So, I moved the evaluations of the input to a web worker. \"), mdx(\"h3\", null, \"Offline support\"), mdx(BlockQuote, {\n    citationText: \"Google Developers Blog\",\n    citationLink: \"https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#what_is_a_service_worker\",\n    mdxType: \"BlockQuote\"\n  }, \"Service workers are a special type of web workers. A service worker is essentially a JavaScript file that runs separately from the main browser thread (or UI thread), intercepting network requests, caching or retrieving resources from the cache, and delivering push messages.\"), mdx(\"p\", null, \"With the use of service workers, web apps can now deliver a custom offline experience. For example, YouTube and Spotify have a custom offline page. While searching for more examples, I found this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://sudoku.jull.dev/\"\n  }, \"awesome sudoku game\"), \", which is completely available for offline use.\"), mdx(\"p\", null, \"Like that sudoku game, XCalc doesn\\u2019t need an active internet connection to work. So, as you may guess, I wanted to make XCalc completely offline, just like that game. So, I added a service worker to do that. It pre-caches all the required resources. After that, the resources will be loaded from the cache.\"), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://webassembly.org\"\n  }, \"WebAssembly\"), \" (\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://www.assemblyscript.org\"\n  }, \"AssemblyScript\"), \")\"), mdx(\"p\", null, \"WebAssembly (WASM, in short) is a new type of code that can be run inside web browsers. It is a low-level assembly-like language which runs with near-native performance.\\nBut, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"keep in mind that WASM is not intended to replace JS, and it won\\u2019t\"), \".\"), mdx(\"p\", null, \"WebAssembly first appeared in 2017, but I came to know about it recently. I decided to use it in XCalc. I know that WebAssembly wasn't meant to be used on a calculator app like XCalc, But I chose to use it just for the sake of learning.\"), mdx(\"p\", null, \"C, C++, Rust can be compiled to WASM. But I don't know any of them before. And I didn't want to learn them. Fortunately, I came to know about AssemblyScript. AssemblyScript is a typescript-based language which compiles to WASM. With the familiar syntax, AssemblyScript appeared to be the best option for me. So, I chose to use it.\"), mdx(\"p\", null, \"Getting started with AssemblyScript was a little hard for me. But, maybe, that would have been easy if I read the documentation clearly.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Overall, working on XCalc was a really great experience for me. There was a lot of fun and learning.\"), mdx(\"p\", null, \"Here is the main thing I learnt while building XCalc.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Read the documentation clearly\"), \". This is one of my bad habits. I don't read the documentation completely. I always miss to notice something in every documentation I read. Because of that, I have even spent a significant amount of time, trying to find how to do a specific thing (which is already explained in the documentation). So, when you are reading a documentation for something, make sure to read it through. Don\\u2019t skip anything. When you get stuck with an error or bug, before starting searching it on google, make sure to check the official documentation.\"), mdx(\"p\", null, \"If you have read this much, Thank you for your time. Have any questions? Feel free to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/iamSahithyan\"\n  }, \"reach me out on Twitter\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div style=\"height:80px\"></div><h2 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>Why I built XCalc?</h2><p>We all have a pre-installed calculator app on our devices (except iPad users). They provide us with basic and some advanced operations. For the majority of people, in most cases, that is more than enough.</p><p>But, as a Math lover, sometimes, I ran into some problems which can be solved easily on a computer (or a calculator), but still not included in any of these existing calculator apps.\nFor example, prime factorization. It&#x27;s easy for a small set of numbers (like 500, 360). But on a computer, it can be done in seconds (or even milliseconds). But I have never seen that functionality included in a calculator. And this is only one example. This felt like a gap for me. That’s why I decided to develop a calculator app that has these extra functions. That’s what XCalc is.</p><p>Note that I only added the functions that are not available in those existing calculator apps. And I intentionally left out the functions like log or sqrt, because they are already available on the pre-installed calculator apps.</p><p>So, what functions did I add? <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://x-calc.vercel.app/help\">Here</a> is a list. </p><ul><li>is-prime: checks if a number is a prime number</li><li>factors: finds all the factors of a number</li><li>lcm: finds the least common multiple of a list a numbers</li><li>gcd: finds the greatest common divisor of a list a numbers</li><li>factorial: finds the n-th factorial</li><li>ratio: finds the minimum ratio in a list of numbers</li><li>nck: finds the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Binomial_coefficient\">binomial coefficient</a> denoted by (n k)</li><li>prime-factorize: finds the prime factorization of the given number</li></ul><p>If you like the idea of XCalc, you can try it <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bit.ly/xcalc-web\">here</a>. From the website, XCalc can be installed to your devices (I don’t know if it is supported on all operating systems and all browsers).\nAnd <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bit.ly/xcalc-app\">XCalc is available on Google Play Store</a> as well.</p><p>If you are interested to see how XCalc is coded, Good news, XCalc is <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://github.com/sahithyandev/xcalc\">open-sourced</a>. If you find it hard to understand the code, let me know about that.</p><h2 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>How I built it</h2><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://typescriptlang.org\">TypeScript</a></h3><p>TypeScript is a strict syntactical superset of JavaScript and adds optional strict typing to the language. It compiles to JavaScript.</p><p>I decided to bring it into the codebase mainly for two reasons. The important one is <strong>prevention of many little bugs</strong>. As TypeScript allows me to set types to everything, now I don’t have to be too concerned about the code now. I can be confident (in most cases) that I am not gonna run into any runtime errors.\nAnd the next one is, <strong>reduced mind-overloading</strong>. Which means, now, I don’t have to memorize the function parameter types and object structures. My IDE&#x27;s intellisense takes care of that.</p><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>UI Design</h3><p>It&#x27;s highly recommended to design the UI before coding it. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=ZyAsNw7XZ1c\">Here&#x27;s why</a>. </p><p>Hence, I decided to design the whole UI first (or at least try). I opened up <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://figma.com\">Figma</a> and gave it a try. Here&#x27;s what I designed.</p><img alt=\"XCalc Old UI design\" src=\"/post__images/building-xcalc/xcalc-old-design.jpg\" loading=\"lazy\"/><p>I went with it. Because, the important thing about XCalc is its functionality; not the UI.</p><p>When I made XCalc completely working, (as always) I stopped working on it. After about 3 months, I came back. I decided to rewrite the whole app with new (better) technologies. As a part of that, I redesigned the UI. It turned out to be pretty great.</p><img alt=\"XCalc New UI design\" src=\"/post__images/building-xcalc/xcalc-new-design.png\" loading=\"lazy\"/><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reactjs.org\">React</a></h3><p>When I first started developing XCalc, I didn&#x27;t use any front-end libraries. I wanted to write all the code by myself. The state of the app (the input), the dynamic UI rendering were all done by the code I wrote. At first, It worked without any problems.  But when I came back after 3 months, I understood none of it. That&#x27;s when I realized that I should have used a front-end library.</p><p>When I started rewriting the app, I chose to go with React, which is my favorite front-end library.</p><p>To be honest, the React code is not that good either. But it is a lot more readable than my code.</p><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://sass-lang.com\">Sass</a></h3><p>Sass is a pre-compiler for CSS. It provides some additional functionalities which results in a better developer experience. That’s the one and only reason I decided to use Sass.</p><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>Off-thread evaluations</h3><p>By default, the browser uses a single thread (&quot;main thread&quot;) to run all the processes of a website. This is where the layout and paint are done. This is where the user events get processed. And also, this is where, the javascript runs. Which means, long-running JavaScript will block the thread, leading to an unresponsive page (== bad user experience)</p><p>This is where web workers come into play. Web workers are a simple means for web content to run scripts on background threads. This will make sure the main thread is free from getting stuck. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Learn more about web workers on MDN</a>.</p><p>XCalc never blocked the main thread (on my laptop and my phone), it worked without any problems. There were no performance issues at all. But, on the low-end phones, performance issues might rise.</p><p>And, it&#x27;s a good idea to use the main thread only for UI work. That&#x27;s why the main thread is called &quot;UI thread&quot; on other platforms. So, I moved the evaluations of the input to a web worker. </p><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>Offline support</h3><figure><blockquote cite=\"https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#what_is_a_service_worker\">Service workers are a special type of web workers. A service worker is essentially a JavaScript file that runs separately from the main browser thread (or UI thread), intercepting network requests, caching or retrieving resources from the cache, and delivering push messages.</blockquote><figcaption><cite>Google Developers Blog</cite></figcaption></figure><p>With the use of service workers, web apps can now deliver a custom offline experience. For example, YouTube and Spotify have a custom offline page. While searching for more examples, I found this <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://sudoku.jull.dev/\">awesome sudoku game</a>, which is completely available for offline use.</p><p>Like that sudoku game, XCalc doesn’t need an active internet connection to work. So, as you may guess, I wanted to make XCalc completely offline, just like that game. So, I added a service worker to do that. It pre-caches all the required resources. After that, the resources will be loaded from the cache.</p><h3 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webassembly.org\">WebAssembly</a> (<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.assemblyscript.org\">AssemblyScript</a>)</h3><p>WebAssembly (WASM, in short) is a new type of code that can be run inside web browsers. It is a low-level assembly-like language which runs with near-native performance.\nBut, <strong>keep in mind that WASM is not intended to replace JS, and it won’t</strong>.</p><p>WebAssembly first appeared in 2017, but I came to know about it recently. I decided to use it in XCalc. I know that WebAssembly wasn&#x27;t meant to be used on a calculator app like XCalc, But I chose to use it just for the sake of learning.</p><p>C, C++, Rust can be compiled to WASM. But I don&#x27;t know any of them before. And I didn&#x27;t want to learn them. Fortunately, I came to know about AssemblyScript. AssemblyScript is a typescript-based language which compiles to WASM. With the familiar syntax, AssemblyScript appeared to be the best option for me. So, I chose to use it.</p><p>Getting started with AssemblyScript was a little hard for me. But, maybe, that would have been easy if I read the documentation clearly.</p><h2 class=\"linkable-head_linkable__2KbTa\" id=\"\" data-is-linkable=\"true\"><a class=\"reset linkable-head_link-hashtag__kJWdR\" href=\"/post/\">#</a>Conclusion</h2><p>Overall, working on XCalc was a really great experience for me. There was a lot of fun and learning.</p><p>Here is the main thing I learnt while building XCalc.</p><p><strong>Read the documentation clearly</strong>. This is one of my bad habits. I don&#x27;t read the documentation completely. I always miss to notice something in every documentation I read. Because of that, I have even spent a significant amount of time, trying to find how to do a specific thing (which is already explained in the documentation). So, when you are reading a documentation for something, make sure to read it through. Don’t skip anything. When you get stuck with an error or bug, before starting searching it on google, make sure to check the official documentation.</p><p>If you have read this much, Thank you for your time. Have any questions? Feel free to <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/iamSahithyan\">reach me out on Twitter</a></p>","scope":{}}},"__N_SSG":true}